{"config":{"lang":["ru","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kaspeak SDK","text":"<p>Kaspeak SDK is a tool for quickly and conveniently creating decentralized applications on the Kaspa BlockDAG. The SDK takes care of all low-level tasks: forming, sending and receiving messages, handling transactions and cryptography.</p>"},{"location":"#what-you-can-do-with-the-sdk","title":"What you can do with the SDK","text":"<ul> <li>Create and transmit any textual or binary data through Kaspa transactions.</li> <li>Easily develop custom message types with automatic serialization and callbacks.</li> <li>Utilize built-in cryptographic methods for data protection and authentication (ECDH, XChaCha20-Poly1305, Schnorr).</li> <li>Minimize transaction fees through compact data packaging using CBOR and Zstandard compression.</li> <li>Make confidential conversations using unique cryptographic identifiers.</li> <li>Run applications seamlessly both in the browser and Node.js environments without additional effort.</li> </ul> <p>Kaspeak SDK frees you from needing to dive into network interaction details and cryptography. Focus on your application's logic\u2014we've taken care of the rest.</p> <p>Launch a chat, game, bot, or any other application directly on the Kaspa network. Quickly, securely, without intermediaries or censorship.</p>"},{"location":"01-overview/intro/","title":"Introduction","text":"<p>Kaspeak SDK lets you easily create full-featured Web3 applications running directly on the Kaspa network. This unlocks practically unlimited opportunities for exchanging arbitrary data\u2014text, files, messages\u2014instantly and at minimal cost.</p> <p>With Kaspeak SDK, developers do not need to deal with low-level network interactions, manage transactions manually, or configure encryption themselves. The SDK provides a ready-to-use solution with a clear API and a high level of abstraction.</p>"},{"location":"01-overview/intro/#key-advantages-of-the-sdk","title":"Key advantages of the SDK","text":"<ul> <li>Speed and scalability: Instant data delivery due to the high throughput of the Kaspa network.</li> <li>Low fees: Minimization of message size through efficient packaging (CBOR + Zstandard).</li> <li>Security and privacy: Proven cryptographic schemes (ECDH, XChaCha20-Poly1305, Schnorr signatures).</li> <li>Easy integration: Single SDK for browser and Node.js with an identical API.</li> <li>Extensibility and convenience: Easily add custom message types and register event handlers.</li> </ul> <p>Kaspeak SDK is ideal for developing:</p> <ul> <li>Private and public chats</li> <li>Games and gaming services</li> <li>Notification systems</li> <li>Data transfer and file sharing services</li> <li>Any other decentralized applications</li> </ul> <p>If you are looking for a simple and reliable tool to quickly deploy your own service on the Kaspa network, Kaspeak SDK will be your best helper.</p> <p>Start developing right now\u2014Web3 has never been this accessible!</p>"},{"location":"01-overview/quick-start/","title":"Quick Start","text":"<p>By default, Kaspeak SDK operates on the <code>TESTNET-10</code> network, but nothing prevents you from using <code>MAINNET</code> for your application.</p> <p>You can get some TKAS on <code>TESTNET-10</code> using the faucet.</p>"},{"location":"01-overview/quick-start/#installation","title":"Installation","text":"<pre><code>pnpm add kaspeak-sdk\n</code></pre>"},{"location":"01-overview/quick-start/#initialization","title":"Initialization","text":"<pre><code>const { Kaspeak } = require(\"kaspeak-sdk\");\n\nconst PREFIX = \"TEST\";\nconst PRIV_KEY = 6;\n\nconst sdk = await Kaspeak.create(PRIV_KEY, PREFIX);\nawait sdk.connect();\n</code></pre> <p><code>PREFIX</code> is your application's unique name, limited to 4 bytes. It prevents interference from other SDK users' messages.</p>"},{"location":"01-overview/quick-start/#creating-sending-and-receiving-an-unencrypted-message","title":"Creating, sending, and receiving an unencrypted message","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass ExampleMessage extends BaseMessage {\n    static requiresEncryption = false;\n    static messageType = 1;\n\n    constructor(foo = \"\", bar = \"\", header) {\n        super(header);\n        this.foo = foo;\n        this.bar = bar;\n    }\n\n    toPlainObject() {\n        return { f: this.foo, b: this.bar };\n    }\n\n    fromPlainObject(obj) {\n        this.foo = obj.f ?? \"\";\n        this.bar = obj.b ?? \"\";\n    }\n}\n\nconst PREFIX = \"TEST\";\nconst PRIV_KEY = 6;\nconst NETWORK_ID = \"testnet-10\";\n\nlet sdk;\n\nasync function exampleHandler(header, raw) {\n    const msg = await sdk.decode(header, raw);\n    console.log(\"Foo:\", msg.foo, \"Bar:\", msg.bar);\n}\n\nasync function main() {\n    sdk = await Kaspeak.create(PRIV_KEY, PREFIX);\n    await sdk.connect(NETWORK_ID);\n    console.log(\"Public key:\", sdk.publicKey);\n    console.log(\"Address:\", sdk.address);\n\n    sdk.registerMessage(ExampleMessage, exampleHandler);\n\n    const msg = new ExampleMessage(\"hello\", \"world\");\n    const encoded = await sdk.encode(msg);\n    const identifier = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(encoded.length);\n    const opIds = sdk.getOutpointIds(tx);\n    const payload = await sdk.createPayload(opIds, ExampleMessage.messageType, identifier, encoded);\n    await sdk.sendTransaction(tx, payload);\n}\n\nmain();\n</code></pre> <p>To run this example on the main network, use <code>NETWORK_ID = \"mainnet\"</code>.</p> <p>This example DOES NOT use message encryption. If you wish to send encrypted messages, see Message Encryption.</p>"},{"location":"02-core/crypto/","title":"Cryptography (Overview)","text":"<p>Kaspeak SDK uses only verified implementations.</p> Algorithm Library Purpose secp256k1 @noble/secp256k1 + custom wrapper Key generation, ECDH Schnorr kaspa-wasm Transaction and payload signing XChaCha20-Poly1305 @stablelib/xchacha20poly1305 Symmetric encryption SHA-256 @noble/hashes Hashing Zstandard @bokuweb/zstd-wasm Payload compression CBOR cborg Compact deterministic binary object representation <p>Detailed schemes and algorithms are presented in \"Advanced Topics\":</p> <ul> <li>Identifiers \u2014 point chains, signatures, movements.  </li> <li>Message Encryption \u2014 step-by-step pipeline: \"object \u2192 CBOR \u2192 Zstd \u2192 XChaCha20\".</li> </ul>"},{"location":"02-core/messages/","title":"Creating Custom Messages","text":"<ol> <li>Create a class extending <code>BaseMessage</code>.</li> <li>Declare two static properties:<ul> <li><code>messageType</code> \u2014 integer <code>0\u202665535</code>, unique for each message type.</li> <li><code>requiresEncryption</code> \u2014 <code>true</code> if data should be encrypted.</li> </ul> </li> <li>Implement methods <code>toPlainObject()</code> and <code>fromPlainObject(obj)</code> to convert instances to plain objects and back.</li> <li>(Optional) Add custom constructor fields and logic.</li> <li>Connect the type to runtime via <code>sdk.registerMessage()</code>; a callback function can also be provided for incoming messages.</li> </ol>"},{"location":"02-core/messages/#example-of-an-unencrypted-message","title":"Example of an Unencrypted Message","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass MyMessage extends BaseMessage {\n    static requiresEncryption = false;\n    static messageType = 100;\n\n    constructor(foo = \"\", bar = \"\", header) {\n        super(header);\n        this.foo = foo;\n        this.bar = bar;\n    }\n\n    toPlainObject() {\n        return { f: this.foo, b: this.bar };\n    }\n\n    fromPlainObject(obj) {\n        this.foo = obj.f ?? \"\";\n        this.bar = obj.b ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(MyMessage, async (h, raw) =&gt; {\n        const msg = await sdk.decode(h, raw);\n        console.log(msg.foo, msg.bar);\n    });\n\n    const msg = new MyMessage(\"hello\", \"world\");\n    const body = await sdk.encode(msg);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, MyMessage.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre>"},{"location":"02-core/messages/#example-of-an-encrypted-message","title":"Example of an Encrypted Message","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(SecretNote, async (h, raw) =&gt; {\n        const secret = h.peer.sharedSecret;\n        const note = await sdk.decode(h, raw, secret);\n        console.log(note.text);\n    });\n\n    const conversationKeys = sdk.deriveConversationKeys(sdk.publicKey);\n    const note = new SecretNote(\"I love Kaspa!\");\n    const body = await sdk.encode(note, conversationKeys.secret);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, SecretNote.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre> <p>This example demonstrates sending an encrypted message to oneself. If the message is intended for another user, provide their public key to <code>deriveConversationKeys</code>.</p>"},{"location":"02-core/messages/#recommendations","title":"Recommendations","text":"<ul> <li>Shorten keys in <code>toPlainObject</code> and <code>fromPlainObject</code> to reduce the CBOR payload size.</li> <li>When <code>requiresEncryption = true</code>, always provide the encryption key to <code>encode</code> and <code>decode</code>.</li> </ul>"},{"location":"02-core/models/","title":"Data Models","text":"<p>This page describes key data structures used in Kaspeak SDK for forming, sending, and receiving messages.</p>"},{"location":"02-core/models/#payload-structure","title":"Payload Structure","text":"<p><code>Payload</code> is a data structure embedded in a Kaspa transaction. Each payload contains the actual data and necessary metadata.</p> <p>Payload always starts with a unique <code>KSPK</code> marker (0x4B53454B).</p>"},{"location":"02-core/models/#payload-format","title":"Payload Format","text":"Offset Field Size Description 0 marker 4 Marker <code>KSPK</code> (SDK identifier) 4 version 1 Protocol version (currently = 1) 5 prefix 4 Application prefix (ASCII) 9 type 2 Message type (<code>messageType</code>) 11 id 33 Message identifier (<code>Identifier</code>) 44 publicKey 33 Sender's public key 77 signature 64 Payload's Schnorr signature 141 dataLen 2 Data length (bytes) 143 data N Data (CBOR, compressed, possibly encrypted)"},{"location":"02-core/models/#peer-object","title":"Peer Object","text":"<p><code>Peer</code> describes the message sender and stores the public key and shared secret for encrypted messages.</p>"},{"location":"02-core/models/#peer-fields","title":"<code>Peer</code> fields:","text":"Field Type Description <code>address</code> <code>string</code> Sender's Kaspa address <code>publicKey</code> <code>Uint8Array</code> Sender's public key <code>signature</code> <code>Uint8Array</code> Schnorr signature of payload <code>isOwn</code> <code>boolean</code> <code>true</code> if the message sent by SDK itself <code>sharedSecret</code> <code>Uint8Array</code> Shared secret (encryption key) <code>chainKey</code> <code>bigint</code> Scalar for generating message ID chains"},{"location":"02-core/models/#identifier-and-secretidentifier","title":"Identifier and SecretIdentifier","text":"<p>Cryptographic message identifiers ensure privacy and message linkage within conversations.</p>"},{"location":"02-core/models/#identifier","title":"Identifier","text":"<p>A compressed secp256k1 curve point uniquely identifying a message without revealing order externally.</p> Field Type Description <code>hex</code> <code>string</code> Hex representation of a point (66 characters, compressed format) <code>bytes</code> <code>Uint8Array</code> Binary representation of an identifier (33 bytes) <p>Methods:</p> <ul> <li><code>fromHex(hex)</code> / <code>fromBytes(buf)</code></li> <li><code>fromChainKey(chainKey, i, PK)</code></li> <li><code>next(chainKey, n)</code> / <code>prev(chainKey, n)</code></li> <li><code>verify(sig, msg)</code></li> </ul>"},{"location":"02-core/models/#secretidentifier","title":"SecretIdentifier","text":"<p>Extends <code>Identifier</code> by adding a private key (scalar) for creating signatures.</p> Field Type Description <code>secret</code> <code>bigint</code> Private scalar for signing messages <p>Optional methods:</p> <ul> <li><code>sign(msg)</code> - creating a Schnorr signature of a message using a secret key.</li> </ul> <p>Important: <code>SecretIdentifier</code> cannot be created from public data. Use factories:</p> <ul> <li><code>SecretIdentifier.fromSecret(secret)</code></li> <li><code>SecretIdentifier.random()</code></li> </ul>"},{"location":"02-core/models/#messageheader-object","title":"MessageHeader Object","text":"<p><code>MessageHeader</code> contains all necessary message information.</p>"},{"location":"02-core/models/#messageheader-fields","title":"<code>MessageHeader</code> fields:","text":"Field Type Description <code>txid</code> <code>string</code> Kaspa transaction ID <code>peer</code> <code>Peer</code> Sender information <code>prefix</code> <code>string</code> Application prefix <code>type</code> <code>number</code> Message type <code>identifier</code> <code>Identifier</code> Message identifier <code>blockMeta.hash</code> <code>string</code> Hash of the block in which the transaction was confirmed <code>blockMeta.timestamp</code> <code>bigint</code> Confirmation time (Unix-time) <code>blockMeta.daaScore</code> <code>bigint</code> Kaspa network complexity index (DAA) <code>consensusHash</code> <code>string</code> Consensus hash (signed data)"},{"location":"02-core/sdk/","title":"Kaspeak SDK","text":"<p>This page provides an overview of key methods and features of Kaspeak SDK. Detailed cryptographic and data-format schemes are covered separately.</p> <p>Below is a practical guide to using the SDK.</p>"},{"location":"02-core/sdk/#quick-start","title":"Quick Start","text":"<p>Initialize the SDK:</p> <pre><code>import { Kaspeak, randomBytes } from \"kaspeak-sdk\";\n\nconst sdk = await Kaspeak.create(randomBytes(32), \"CHAT\");\nawait sdk.connect();\n</code></pre>"},{"location":"02-core/sdk/#method-createprivatekey-prefix-parameters","title":"Method <code>create(privateKey, prefix)</code> Parameters","text":"<ul> <li><code>privateKey</code> \u2013 can be a <code>bigint</code>, <code>number</code>, <code>Uint8Array</code>, or hex-string.</li> <li><code>prefix</code> \u2013 unique 4-character ASCII prefix per application, avoiding message conflicts.</li> </ul> <p>After <code>create()</code> call, SDK is ready to connect.</p>"},{"location":"02-core/sdk/#method-connectnetworkid-url-parameters","title":"Method <code>connect(networkId?, url?)</code> Parameters","text":"Parameter Default Description <code>networkId</code> <code>\"testnet-10\"</code> Kaspa network (<code>\"mainnet\"</code> or testnets) <code>url</code> (automatic) Specific Kaspa node URL (optional)"},{"location":"02-core/sdk/#event-handling-error-management","title":"Event Handling &amp; Error Management","text":"<p>Kaspeak SDK uses event-driven design:</p> <pre><code>sdk.on(\"KaspeakMessageReceived\", async ({ header, data }) =&gt; {\n    // incoming messages handling\n});\n\nsdk.on(\"error\", console.error);\n</code></pre> <ul> <li><code>KaspeakMessageReceived</code> triggers on every incoming payload.</li> <li><code>error</code> captures network issues, serialization errors, and other SDK issues.</li> </ul>"},{"location":"02-core/sdk/#creating-custom-message-types","title":"Creating Custom Message Types","text":"<p>Custom messages can be created by subclassing <code>BaseMessage</code>:</p> <pre><code>class ChatMsg extends BaseMessage {\n    static messageType = 1337; // Unique message type code\n    static requiresEncryption = true; // Wether message requiries encryption \n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() { return { t: this.text }; }\n    fromPlainObject({ t }) { this.text = t; }\n}\n\nsdk.registerMessage(ChatMsg, async (header, rawData) =&gt; {\n    const secret = header.peer.sharedSecret; // retrieve shared secret\n    const chat = await sdk.decode(header, rawData, secret);\n    console.log(chat.text);\n});\n</code></pre> <p>Method <code>registerMessage(ctor, worker?)</code>:</p> <ul> <li><code>ctor</code> \u2013 <code>BaseMessage</code> subclass.</li> <li><code>worker</code> \u2013 optional handler for incoming messages of that type.</li> </ul>"},{"location":"02-core/sdk/#core-message-operations","title":"Core Message Operations","text":"<p>Encoding and sending a message:</p> <pre><code>const encoded = await sdk.encode(messageInstance, secret);\nconst tx = await sdk.createTransaction(encoded.length);\nconst opIds = sdk.getOutpointIds(tx);\nconst payload = await sdk.createPayload(\n    opIds,\n    messageInstance.messageType,\n    Identifier.random(),\n    encoded\n);\nawait sdk.sendTransaction(tx, payload);\n</code></pre> <p>Decoding received messages:</p> <pre><code>const message = await sdk.decode(header, rawData, secret);\n</code></pre> <p>Obtaining conversation keys:</p> <pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(remotePublicKey);\n</code></pre> <p>Checking wallet balance:</p> <pre><code>const kasBalance = await sdk.getBalance();\n</code></pre>"},{"location":"02-core/sdk/#sdk-configuration-options","title":"SDK Configuration Options","text":"<pre><code>sdk.setPrefixFilterEnabled(false); // Allow messages from any prefix\nsdk.setSignatureVerificationEnabled(false); // Disable signature verification (unsafe!)\nsdk.setPriorityFee(0.1); // Transaction fee adjustment (KAS)\n</code></pre>"},{"location":"02-core/sdk/#additional-methods-properties","title":"Additional Methods &amp; Properties","text":"Method/Property Description <code>sdk.address</code> SDK-generated Kaspa address <code>sdk.publicKey</code> Hex representation of public key <code>sdk.balance</code> Last retrieved wallet balance <code>sdk.utxoCount</code> Count of UTXOs in wallet <code>sdk.isConnected</code> Current network connection status <code>sdk.getAddressFromPublicKey()</code> Derives Kaspa address from public key"},{"location":"02-core/utils/","title":"Utilities","text":""},{"location":"02-core/utils/#utilities","title":"Utilities","text":""},{"location":"02-core/utils/#bytestohex","title":"bytesToHex","text":"<pre><code>const hex = bytesToHex(new Uint8Array([0xde, 0xad, 0xbe, 0xef]));\n// \"deadbeef\"\n</code></pre> <ul> <li><code>bytes</code> \u2013 array of arbitrary length.</li> <li><code>byteSize</code> (optional) \u2013 if specified, the output is padded with leading zeros to <code>byteSize * 2</code> characters.</li> </ul>"},{"location":"02-core/utils/#bytestoint","title":"bytesToInt","text":"<pre><code>const n = bytesToInt(new Uint8Array([0xff, 0x01]));\n// 65281n\n</code></pre> <p>Returns an unsigned <code>bigint</code> value.</p>"},{"location":"02-core/utils/#hextobytes","title":"hexToBytes","text":"<pre><code>const buf = hexToBytes(\"deadbeef\");\n// Uint8Array(4) [ 222, 173, 190, 239 ]\n</code></pre> <ul> <li>Requirement: string length must be even; otherwise, an exception is thrown.</li> </ul>"},{"location":"02-core/utils/#hextoint","title":"hexToInt","text":"<pre><code>const n = hexToInt(\"ff01\");\n// 65281n\n</code></pre>"},{"location":"02-core/utils/#inttobytes","title":"intToBytes","text":"<pre><code>const buf = intToBytes(0x1234n, 4);\n// Uint8Array(4) [ 0, 0, 18, 52 ]\n</code></pre> <ul> <li><code>byteSize</code> \u2013 optional fixed length.   If provided, the result is padded with leading zeros.</li> <li>When passing a <code>number</code>, internal conversion is performed via <code>BigInt()</code>.</li> </ul>"},{"location":"02-core/utils/#inttohex","title":"intToHex","text":"<pre><code>const hex = intToHex(4660, 4);\n// 00001234\n</code></pre> <p>Similar to <code>intToBytes</code>, but returns a string.</p>"},{"location":"02-core/utils/#randombytes","title":"randomBytes","text":"<pre><code>const nonce = randomBytes(24);\n// Uint8Array(24) [\n//  133, 199,  42,  72, 64, 23, 157,\n//   73, 233, 145,  94, 63, 78,  17,\n//   24,  13, 182, 185, 52, 29,  38,\n//  171, 215, 234\n//]\n</code></pre> <ul> <li>Delegates to <code>@noble/hashes/utils::randomBytes</code>, which uses   the platform's cryptographically secure generator (Web Crypto in browsers / <code>node:crypto</code> in Node.js).</li> <li>Guaranteed to return a buffer of exactly the specified length.</li> </ul>"},{"location":"02-core/utils/#notes","title":"Notes","text":"<ol> <li>All functions do not modify the input buffers \u2014 a new object is always created.</li> <li><code>intToHex</code> and <code>intToBytes</code> accept both <code>number</code> and <code>bigint</code>; however, for values &gt; 2^53, you should use <code>bigint</code> to avoid loss of precision.</li> <li>When working with keys and hashes, specify <code>byteSize</code> to guarantee a fixed length (e.g., <code>32</code> bytes / <code>64</code> characters).</li> </ol>"},{"location":"03-advanced/delegation/","title":"Transaction Delegation","text":"<p>Client-Server scheme allows sending Kaspeak messages without funding the client's wallet with KAS. The client encrypts and signs the payload, and the server creates, funds, and broadcasts the transaction.</p>"},{"location":"03-advanced/delegation/#two-way-pipeline","title":"Two-way pipeline","text":"<ol> <li>Client encrypts the message and sends its length to the server.</li> <li>Server creates a suitably sized transaction and returns an <code>outpointIds</code> string to the client.</li> <li>Client forms the payload (encrypted message + Schnorr signature) and sends it back to the server.</li> <li>Server embeds the payload into the transaction, signs inputs with its key, pays the fee, and publishes the transaction on Kaspa.</li> </ol> <ul> <li>Encryption and signing are handled by the client; the private key never leaves the device.  </li> <li>Transaction creation and fee payments are handled by the server.  </li> <li>Data security remains intact: the payload is already encrypted with XChaCha20-Poly1305.  </li> <li>Metadata (sender's address, identifier) become visible to the server.</li> </ul>"},{"location":"03-advanced/delegation/#complete-example","title":"Complete Example","text":"<p>This scheme lets the client form its encrypted payload and sign it using its own private key, while the server publishes the payload to the network. The client doesn't even need to connect directly to the node. The encrypted message is addressed to the server's public key, enabling the server to easily read it from the blockdag via its worker. This example doesn't implement actual client-server data exchange, but clearly illustrates the roles. Real-world apps require a full client-server interaction.</p> <pre><code>const { Kaspeak, BaseMessage, SecretIdentifier, bytesToHex } = require(\"kaspeak-sdk\");\n\nconst SERVER_PRIV_KEY = 6;\nconst CLIENT_PRIV_KEY = 1337;\nconst PREFIX = \"TEST\";\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\nasync function main() {\n    const server_sdk = await Kaspeak.create(SERVER_PRIV_KEY, PREFIX);\n    await server_sdk.connect();\n    console.log(\"Server pubkey\", server_sdk.publicKey);\n\n    server_sdk.registerMessage(SecretNote, async (header, rawData) =&gt; {\n        console.log(\"Peer public key:\", bytesToHex(header.peer.publicKey));\n        const sharedSecret = header.peer.sharedSecret;\n        const decoded = await server_sdk.decode(header, rawData, sharedSecret);\n        console.log(\"Result =&gt;\", decoded);\n    });\n\n    const client_sdk = await Kaspeak.create(CLIENT_PRIV_KEY, PREFIX);\n    console.log(\"Client pubkey\", client_sdk.publicKey);\n    const msg = new SecretNote(\"Hello, SecretNote!\");\n    const conversationKey = client_sdk.deriveConversationKeys(server_sdk.publicKey);\n    const encoded = await client_sdk.encode(msg, conversationKey.secret);\n\n    const transaction = await server_sdk.createTransaction(encoded.length);\n    const outpointIds = server_sdk.getOutpointIds(transaction);\n\n    const identifier = SecretIdentifier.random();\n    const rawPayload = await client_sdk.createPayload(\n        outpointIds,\n        SecretNote.messageType,\n        identifier,\n        encoded\n    );\n\n    await server_sdk.sendTransaction(transaction, rawPayload);\n}\n\nmain();\n</code></pre>"},{"location":"03-advanced/delegation/#why-this-doesnt-compromise-data-integrity","title":"Why this doesn't compromise data integrity?","text":"<ul> <li> <p>Public key (33 bytes) is stored openly in <code>Payload</code>, but also included in the Schnorr signature.   This prevents sender substitution even with delegation.</p> </li> <li> <p>Private key is never transmitted; only the payload hash (<code>marker \u2225 prefix \u2225 \u2026 \u2225 outIds</code>) is signed.   The server sees only the final signature and can't misuse it.</p> </li> </ul> <p>Thus, delegation preserves cryptographic data integrity guarantees while offloading financial costs from the client.</p>"},{"location":"03-advanced/delegation/#privacy-trade-offs","title":"Privacy trade-offs","text":"<ul> <li>Server knows whom you serve and when\u2014IP, address, and identifier become openly visible.</li> <li>Conversation anonymity is compromised: the server can correlate your activity by IP, session, and timing.</li> </ul> <p>Only use delegation if lowering entry barriers is more critical than maintaining complete privacy.</p>"},{"location":"03-advanced/encryption/","title":"Message Encryption","text":"<p>Kaspeak SDK uses a set of well-studied cryptographic primitives to provide confidentiality, integrity, and compactness for transmitted data.</p> <pre><code>ECDH &gt; SHA-256 &gt; SHA-256 &gt; XChaCha20-Poly1305\n</code></pre> <ul> <li>ECDH \u2014 obtaining a shared secret between two parties without transmitting any private data.</li> <li>2 x SHA-256 \u2014 deriving a fixed 256-bit key from the ECDH point.</li> <li>XChaCha20-Poly1305 \u2014 symmetric encryption and authentication.</li> <li>CBOR + Zstandard \u2014 object serialization and further compression.</li> </ul>"},{"location":"03-advanced/encryption/#how-to-use-encryption-in-your-application","title":"How to Use Encryption in Your Application?","text":"<p>Kaspeak SDK automatically handles encryption and decryption of messages if your message class has the parameter <code>requiresEncryption = true</code>. You only need to provide the shared secret key, which is calculated using the recipient\u2019s public key.</p> <p>A typical workflow includes:</p> <ul> <li>Creating a message class that requires encryption;</li> <li>Obtaining a shared secret (key) via <code>sdk.deriveConversationKeys</code>;</li> <li>Passing this key to the <code>sdk.encode</code> and <code>sdk.decode</code> methods.</li> </ul> <p>Below is a full example.</p>"},{"location":"03-advanced/encryption/#full-example","title":"Full Example","text":"<p>Let\u2019s create a message type that requires encryption:</p> <pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(SecretNote, async (h, raw) =&gt; {\n        const secret = h.peer.sharedSecret;\n        const note = await sdk.decode(h, raw, secret);\n        console.log(note.text);\n    });\n\n    const conversationKeys = sdk.deriveConversationKeys(sdk.publicKey);\n    const note = new SecretNote(\"I love Kaspa!\");\n    const body = await sdk.encode(note, conversationKeys.secret);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, SecretNote.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre> <p>This example demonstrates sending an encrypted message to yourself. If the message is intended for someone else, pass the recipient's public key to <code>deriveConversationKeys</code>.</p>"},{"location":"03-advanced/encryption/#how-to-derive-the-shared-secret-for-decoding","title":"How to Derive the Shared Secret for Decoding?","text":"<p>The shared secret key is formed using the SDK method <code>deriveConversationKeys</code>, which takes the other party's public key:</p> <pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(peerPublicKey);\n</code></pre> <ul> <li><code>secret</code> \u2014 the encryption key used for encoding and decoding messages.</li> <li><code>chainKey</code> \u2014 an additional identifier used for generating unique message points.</li> </ul>"},{"location":"03-advanced/encryption/#extra-argument-for-encode-and-decode-methods","title":"Extra Argument for <code>encode</code> and <code>decode</code> Methods","text":"<p>The <code>encode</code> and <code>decode</code> methods take an optional second argument \u2014 the encryption key:</p> <pre><code>// Encryption\nconst encryptedData = await sdk.encode(messageInstance, secret);\n\n// Decryption\nconst messageInstance = await sdk.decode(header, encryptedData, secret);\n</code></pre> <p>If your message type is marked with the <code>requiresEncryption</code> flag, the encryption key is required. If the flag is not set, passing the key has no effect and will be ignored.</p> <p>Thus, the SDK automatically ensures correct encryption and decryption of your messages.</p>"},{"location":"03-advanced/encryption/#how-does-it-work-inside-the-sdk","title":"How Does It Work Inside the SDK?","text":""},{"location":"03-advanced/encryption/#1-forming-the-symmetric-key","title":"1. Forming the Symmetric Key","text":"<pre><code>const sharedPoint = ecdh(privA, pubB) // Uint8Array (33 bytes)\nconst secret = sha256(sha256(sharedPoint)) // 32-byte key\n</code></pre> <p>The key computed by both parties will be completely identical.</p>"},{"location":"03-advanced/encryption/#2-serialization-and-compression","title":"2. Serialization and Compression","text":"<pre><code>const plain = message.toPlainObject()\nconst cbor = encode(plain) // CBOR\nconst packed = await compressZstd(cbor, 16) // level 16\n</code></pre> <p>CBOR provides a compact binary representation; Zstandard further reduces the payload size.</p>"},{"location":"03-advanced/encryption/#3-encryption","title":"3. Encryption","text":"<pre><code>const nonce = randomBytes(24)\nconst box = new XChaCha20Poly1305(secret).seal(nonce, packed)\nconst payload = concatenate(nonce, box) // nonce \u2225 ciphertext\n</code></pre> <p>If the wrong key is used or the data is corrupted, decryption will fail, which reliably filters out foreign or damaged traffic.</p>"},{"location":"03-advanced/encryption/#4-decryption","title":"4. Decryption","text":"<pre><code>const nonce = payload.slice(0, 24)\nconst box = payload.slice(24)\nconst clear = new XChaCha20Poly1305(secret).open(nonce, box)\n\nconst cbor = await decompressZstd(clear)\nconst obj = decode(cbor)\n</code></pre>"},{"location":"03-advanced/encryption/#5-authenticity-verification","title":"5. Authenticity Verification","text":"<p>Before sending, the entire payload is signed with the author's Schnorr signature at the SDK level. As long as you do not disable the <code>setSignatureVerificationEnabled</code> flag, you can be sure that the message truly belongs to the sender. Any change in the bytes will result in a negative verification result on the SDK side.</p>"},{"location":"03-advanced/identifiers/","title":"Identifiers","text":"<p>Any entity can be represented as a point on the secp256k1 curve.  A chat, a user, a group, a specific message\u2014everything can become a public point if it\u2019s convenient for us.</p> <p>In the context of using a point as an identifier, we gain several valuable capabilities:</p> <ul> <li>Any group, channel, or user can be represented as a unique point on the curve, which allows us to aggregate messages around the entity to which they belong.  </li> <li>Anyone who created an entity can prove their authorship, which at the cryptographic level enables a primitive form of management. For example, the channel creator can publish their messages, adding a signature using the scalar they possess. This way, any channel participant can be sure that what they are reading was indeed written by the true owner, not by an attacker.</li> </ul>"},{"location":"03-advanced/identifiers/#signing-and-verification","title":"Signing and Verification","text":"<p>Since every <code>Identifier</code> can serve as an x-only public key for a Schnorr signature, Kaspeak SDK by default supports the ability to sign messages and verify signatures directly within the <code>Identifier</code> object.</p> <pre><code>const sid = SecretIdentifier.random()\nconst sig = await sid.sign(\"Hello, Kaspa\")\nconst ok  = await sid.verify(sig, \"Hello, Kaspa\") // true\n</code></pre> <ul> <li><code>SecretIdentifier</code> stores a private scalar and can <code>sign</code>.</li> <li>A regular <code>Identifier</code> stores only the point and can <code>verify</code>.</li> </ul> <p>You can use <code>Identifier</code> and <code>SecretIdentifier</code> as simple recurring identifiers, without involving the more advanced cryptography described below. However, if you want to unlock all the features of Kaspeak SDK, it is recommended to carefully read the following section, which brings a new element of privacy to the transparent blockDAG.</p>"},{"location":"03-advanced/identifiers/#the-essence","title":"The Essence","text":"<p>Suppose we have some arbitrary \u201cbase point\u201d <code>BasePoint</code>. Any next object of the same nature is just <code>BasePoint \u00b7 t</code>, where <code>t</code> is a scalar multiplier known to both parties.</p> <ul> <li>This gives us a tree or chain of entities, without storing any extra data.  </li> <li>An external observer sees only random-looking points, with no idea of their semantic meaning.</li> </ul>"},{"location":"03-advanced/identifiers/#identifier-formula","title":"Identifier Formula","text":"<p>An Identifier (Identifier) is a 33-byte compressed secp256k1 point, computed as:</p> <p><code>ID(i) = PK_A \u00b7 (chainKey^i mod n), i \u2265 1</code></p> <ul> <li><code>PK_A</code> \u2014 author\u2019s public key (can be any other fixed point as well).  </li> <li><code>chainKey</code> \u2014 32-byte scalar, shared between both parties;</li> <li><code>i</code> \u2014 sequential message number within the dialogue.</li> <li><code>n</code>\u2014 the order of the secp256k1 curve.</li> </ul>"},{"location":"03-advanced/identifiers/#creating-the-chainkey","title":"Creating the <code>chainKey</code>","text":"<pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(peerPublicKey)\n</code></pre> <p><code>secret</code> \u2014 the ECDH result. <code>chainKey = SHA-256(secret)</code> &gt; <code>bigint</code> ( mod <code>n</code> ).</p>"},{"location":"03-advanced/identifiers/#advancing-the-identifier","title":"Advancing the Identifier","text":"Operation Formula next (<code>+1</code>) <code>ID_(i+1) = ID_i \u00b7 chainKey</code> previous (<code>-1</code>) <code>ID_(i-1) = ID_i \u00b7 chainKey\u207b\u00b9</code> arbitrary <code>+k</code> <code>ID_(i+k) = ID_i \u00b7 chainKey^k</code> <p>All calculations are ordinary scalar multiplications of points.</p> <pre><code>const id2 = Identifier.fromChainKey(chainKey, 2, sdk.publicKey) // first ID\nconst id3 = id1.next(chainKey)  // second (ID\u2081\u00b7k)\nconst id1 = id1.prev(chainKey)  // previous (ID\u2081\u00b7k\u207b\u00b9)\n</code></pre> <p>The <code>next/prev</code> methods use fast exponentiation under the hood.</p>"},{"location":"03-advanced/identifiers/#security-properties","title":"Security Properties","text":"<ol> <li>Chain confidentiality.    Without the <code>chainKey</code>, it\u2019s impossible to tell <code>ID_1</code> from <code>ID_999</code>; all points look random.</li> <li>One pair \u2014 one chain.    The <code>chainKey</code> is identically derived only for the pair A and B. A third party cannot \u201clink\u201d chains belonging to different participants.</li> <li>Untraceability.    The \u201cnext / previous\u201d algorithm works only with the secret multiplier, so it\u2019s impossible to track the history of messages, even with access to a full archive.</li> </ol> <p>Thanks to this simple trick, combined with the powerful encryption described in the Message Encryption section, we can conduct truly secure and private communication within the Kaspa network. Now, an attacker not only cannot decrypt our messages, but cannot even be sure whom you are talking to.</p>"},{"location":"04-api-md/","title":"API","text":"<p>kaspeak-sdk</p>"},{"location":"04-api-md/#kaspeak-sdk","title":"kaspeak-sdk","text":""},{"location":"04-api-md/#classes","title":"Classes","text":"<ul> <li>BaseMessage</li> <li>ECDSA</li> <li>Identifier</li> <li>Kaspeak</li> <li>MessageHeader</li> <li>Payload</li> <li>Peer</li> <li>Point</li> <li>Schnorr</li> <li>Secp256k1</li> <li>SecretIdentifier</li> <li>UnknownMessage</li> </ul>"},{"location":"04-api-md/#interfaces","title":"Interfaces","text":"<ul> <li>BlockMeta</li> </ul>"},{"location":"04-api-md/#functions","title":"Functions","text":"<ul> <li>bytesToHex</li> <li>bytesToInt</li> <li>hexToBytes</li> <li>hexToInt</li> <li>intToBytes</li> <li>intToHex</li> <li>randomBytes</li> <li>setLogLevel</li> </ul>"},{"location":"04-api-md/classes/BaseMessage/","title":"BaseMessage","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / BaseMessage</p>"},{"location":"04-api-md/classes/BaseMessage/#class-abstract-basemessage","title":"Class: <code>abstract</code> BaseMessage","text":"<p>Defined in: models/messages/base-message.ts:3</p>"},{"location":"04-api-md/classes/BaseMessage/#extended-by","title":"Extended by","text":"<ul> <li><code>UnknownMessage</code></li> </ul>"},{"location":"04-api-md/classes/BaseMessage/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/BaseMessage/#constructor","title":"Constructor","text":"<p><code>protected</code> new BaseMessage(<code>header?</code>): <code>BaseMessage</code></p> <p>Defined in: models/messages/base-message.ts:8</p>"},{"location":"04-api-md/classes/BaseMessage/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/BaseMessage/#header","title":"header?","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/BaseMessage/#returns","title":"Returns","text":"<p><code>BaseMessage</code></p>"},{"location":"04-api-md/classes/BaseMessage/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/BaseMessage/#header_1","title":"header?","text":"<p><code>optional</code> header: <code>MessageHeader</code></p> <p>Defined in: models/messages/base-message.ts:6</p>"},{"location":"04-api-md/classes/BaseMessage/#messagetype","title":"messageType","text":"<p><code>static</code> messageType: <code>number</code> = <code>-1</code></p> <p>Defined in: models/messages/base-message.ts:5</p>"},{"location":"04-api-md/classes/BaseMessage/#requiresencryption","title":"requiresEncryption","text":"<p><code>static</code> requiresEncryption: <code>boolean</code> = <code>false</code></p> <p>Defined in: models/messages/base-message.ts:4</p>"},{"location":"04-api-md/classes/BaseMessage/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/BaseMessage/#messagetype_1","title":"messageType","text":""},{"location":"04-api-md/classes/BaseMessage/#get-signature","title":"Get Signature","text":"<p>get messageType(): <code>number</code></p> <p>Defined in: models/messages/base-message.ts:16</p>"},{"location":"04-api-md/classes/BaseMessage/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/BaseMessage/#requiresencryption_1","title":"requiresEncryption","text":""},{"location":"04-api-md/classes/BaseMessage/#get-signature_1","title":"Get Signature","text":"<p>get requiresEncryption(): <code>boolean</code></p> <p>Defined in: models/messages/base-message.ts:12</p>"},{"location":"04-api-md/classes/BaseMessage/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/BaseMessage/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/BaseMessage/#fromplainobject","title":"fromPlainObject()","text":"<p><code>abstract</code> fromPlainObject(<code>obj</code>): <code>void</code></p> <p>Defined in: models/messages/base-message.ts:22</p>"},{"location":"04-api-md/classes/BaseMessage/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/BaseMessage/#obj","title":"obj","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/BaseMessage/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/BaseMessage/#toplainobject","title":"toPlainObject()","text":"<p><code>abstract</code> toPlainObject(): <code>any</code></p> <p>Defined in: models/messages/base-message.ts:20</p>"},{"location":"04-api-md/classes/BaseMessage/#returns_4","title":"Returns","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/ECDSA/","title":"ECDSA","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / ECDSA</p>"},{"location":"04-api-md/classes/ECDSA/#class-ecdsa","title":"Class: ECDSA","text":"<p>Defined in: crypto/signatures.ts:22</p>"},{"location":"04-api-md/classes/ECDSA/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/ECDSA/#constructor","title":"Constructor","text":"<p>new ECDSA(): <code>ECDSA</code></p>"},{"location":"04-api-md/classes/ECDSA/#returns","title":"Returns","text":"<p><code>ECDSA</code></p>"},{"location":"04-api-md/classes/ECDSA/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/ECDSA/#sign","title":"sign()","text":"<p><code>static</code> sign(<code>msg</code>, <code>priv</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/signatures.ts:23</p>"},{"location":"04-api-md/classes/ECDSA/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/ECDSA/#msg","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/ECDSA/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/ECDSA/#returns_1","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/ECDSA/#verify","title":"verify()","text":"<p><code>static</code> verify(<code>signature</code>, <code>msg</code>, <code>publicKey</code>): <code>boolean</code></p> <p>Defined in: crypto/signatures.ts:32</p>"},{"location":"04-api-md/classes/ECDSA/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/ECDSA/#signature","title":"signature","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/ECDSA/#msg_1","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/ECDSA/#publickey","title":"publicKey","text":"<p><code>string</code> | <code>Point</code></p>"},{"location":"04-api-md/classes/ECDSA/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Identifier/","title":"Identifier","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Identifier</p>"},{"location":"04-api-md/classes/Identifier/#class-identifier","title":"Class: Identifier","text":"<p>Defined in: crypto/identifier.ts:29</p> <p>Identifier</p> <p>A compact, chain-movable label built from a compressed secp256k1 point.</p>"},{"location":"04-api-md/classes/Identifier/#concept","title":"Concept","text":"<p>ID(i) = BasePoint \u00b7 chainKey^i  (mod n)      \u2190 \u201cchain-key derivation\u201d</p> <p>where   - BasePoint  \u2013 any long-term public key;   - chainKey   \u2013 32-byte scalar shared by sender and receiver;   - i \u2265 1        \u2013 message index.</p>"},{"location":"04-api-md/classes/Identifier/#features","title":"Features","text":"<ul> <li>Created from hexadecimal string / raw bytes, or derived with <code>fromChainKey</code>.</li> <li><code>next()</code> / <code>prev()</code> move the label forward or backward along the chain     when the caller knows the same chainKey.</li> <li><code>verify()</code> checks a Schnorr signature against this public point.</li> </ul> <p>Note: Without the matching chainKey two identifiers look like independent points and cannot be linked.</p>"},{"location":"04-api-md/classes/Identifier/#extended-by","title":"Extended by","text":"<ul> <li><code>SecretIdentifier</code></li> </ul>"},{"location":"04-api-md/classes/Identifier/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Identifier/#constructor","title":"Constructor","text":"<p><code>protected</code> new Identifier(<code>hex</code>, <code>bytes</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:34</p>"},{"location":"04-api-md/classes/Identifier/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#hex","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Identifier/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Identifier/#returns","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Identifier/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Identifier/#hex_1","title":"hex","text":"<p><code>readonly</code> hex: <code>string</code></p> <p>Defined in: crypto/identifier.ts:30</p>"},{"location":"04-api-md/classes/Identifier/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/Identifier/#bytes_1","title":"bytes","text":""},{"location":"04-api-md/classes/Identifier/#get-signature","title":"Get Signature","text":"<p>get bytes(): <code>Uint8Array</code></p> <p>Defined in: crypto/identifier.ts:82</p> <p>Retrieves a copy of the internal byte array.</p>"},{"location":"04-api-md/classes/Identifier/#returns_1","title":"Returns","text":"<p><code>Uint8Array</code></p> <p>A new <code>Uint8Array</code> instance containing the bytes.</p>"},{"location":"04-api-md/classes/Identifier/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Identifier/#equals","title":"equals()","text":"<p>equals(<code>other</code>): <code>boolean</code></p> <p>Defined in: crypto/identifier.ts:97</p> <p>Determines whether this identifier is equal to another by comparing their hexadecimal representations.</p>"},{"location":"04-api-md/classes/Identifier/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#other","title":"other","text":"<p><code>Identifier</code></p> <p>The identifier to compare with this instance.</p>"},{"location":"04-api-md/classes/Identifier/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p>True if both identifiers have the same hexadecimal string; otherwise, false.</p>"},{"location":"04-api-md/classes/Identifier/#next","title":"next()","text":"<p>next(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:114</p> <p>Jump forward <code>count</code> positions in the chain: <code>ID_(i+count) = ID_i \u00b7 chainKey^count</code></p>"},{"location":"04-api-md/classes/Identifier/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#chainkey","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/Identifier/#count","title":"count","text":"<p>How many messages ahead (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_3","title":"Returns","text":"<p><code>Identifier</code></p> <p>Next identifier in the sequence.</p>"},{"location":"04-api-md/classes/Identifier/#prev","title":"prev()","text":"<p>prev(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:129</p> <p>Jump backward <code>count</code> positions in the chain: <code>ID_(i-count) = ID_i \u00b7 chainKey_inv^count</code> (section 4, bullet 2).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#chainkey_1","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/Identifier/#count_1","title":"count","text":"<p>How many messages back (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_4","title":"Returns","text":"<p><code>Identifier</code></p> <p>Previous identifier in the sequence.</p>"},{"location":"04-api-md/classes/Identifier/#verify","title":"verify()","text":"<p>verify(<code>sig</code>, <code>msg</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: crypto/identifier.ts:143</p> <p>Verifies the provided signature against the message using the Schnorr algorithm.</p>"},{"location":"04-api-md/classes/Identifier/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#sig","title":"sig","text":"<p><code>Uint8Array</code></p> <p>The signature to verify, represented as a Uint8Array.</p>"},{"location":"04-api-md/classes/Identifier/#msg","title":"msg","text":"<p>The message to validate, which can be either a string or a Uint8Array.</p> <p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Identifier/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>A Promise that resolves to a boolean indicating whether the signature is valid.</p>"},{"location":"04-api-md/classes/Identifier/#frombytes","title":"fromBytes()","text":"<p><code>static</code> fromBytes(<code>bytes</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:49</p> <p>Build Identifier from identifier bytes (33 bytes).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_5","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#bytes_2","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_6","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Identifier/#fromchainkey","title":"fromChainKey()","text":"<p><code>static</code> fromChainKey(<code>chainKey</code>, <code>index</code>, <code>publicKey</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:64</p> <p>Derive ID(i) = PK \u00b7 chainKey^i (mod n).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_6","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#chainkey_2","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code> (bigint).</p>"},{"location":"04-api-md/classes/Identifier/#index","title":"index","text":"<p>Message index \u2265 1.</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Identifier/#publickey","title":"publicKey","text":"<p>Base public point PK(A).</p> <p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt; | <code>Point</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_7","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Identifier/#throws","title":"Throws","text":"<p>RangeError if <code>index = 0</code>.</p>"},{"location":"04-api-md/classes/Identifier/#fromhex","title":"fromHex()","text":"<p><code>static</code> fromHex(<code>hex</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:40</p> <p>Build Identifier from identifier in hex (33 bytes).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_7","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#hex_2","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_8","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Kaspeak/","title":"Kaspeak","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Kaspeak</p>"},{"location":"04-api-md/classes/Kaspeak/#class-kaspeak","title":"Class: Kaspeak","text":"<p>Defined in: sdk/kaspeak.ts:24</p>"},{"location":"04-api-md/classes/Kaspeak/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/Kaspeak/#address","title":"address","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature","title":"Get Signature","text":"<p>get address(): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:142</p>"},{"location":"04-api-md/classes/Kaspeak/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#balance","title":"balance","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_1","title":"Get Signature","text":"<p>get balance(): <code>number</code></p> <p>Defined in: sdk/kaspeak.ts:150</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#isconnected","title":"isConnected","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_2","title":"Get Signature","text":"<p>get isConnected(): <code>boolean</code></p> <p>Defined in: sdk/kaspeak.ts:126</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Kaspeak/#publickey","title":"publicKey","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_3","title":"Get Signature","text":"<p>get publicKey(): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:146</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_3","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#utxocount","title":"utxoCount","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_4","title":"Get Signature","text":"<p>get utxoCount(): <code>number</code></p> <p>Defined in: sdk/kaspeak.ts:154</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_4","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Kaspeak/#callworker","title":"callWorker()","text":"<p>callWorker(<code>header</code>, <code>rawData</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:188</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#header","title":"header","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Kaspeak/#rawdata","title":"rawData","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#connect","title":"connect()","text":"<p>connect(<code>networkId?</code>, <code>url?</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:108</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#networkid","title":"networkId?","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#url","title":"url?","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#createmessageheaderfromtransaction","title":"createMessageHeaderFromTransaction()","text":"<p>createMessageHeaderFromTransaction(<code>txid</code>, <code>prefix</code>, <code>payload</code>, <code>blockMeta</code>, <code>consensusHash</code>): <code>MessageHeader</code></p> <p>Defined in: sdk/kaspeak.ts:259</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#txid","title":"txid","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#prefix","title":"prefix","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#payload","title":"payload","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Kaspeak/#blockmeta","title":"blockMeta","text":"<p><code>BlockMeta</code></p>"},{"location":"04-api-md/classes/Kaspeak/#consensushash","title":"consensusHash","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_7","title":"Returns","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Kaspeak/#createpayload","title":"createPayload()","text":"<p>createPayload(<code>outpointIds</code>, <code>messageType</code>, <code>identifier</code>, <code>data</code>): <code>Promise</code>\\&lt;<code>string</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:221</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#outpointids","title":"outpointIds","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#messagetype","title":"messageType","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#identifier","title":"identifier","text":"<p><code>Identifier</code> | <code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/Kaspeak/#data","title":"data","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#createtransaction","title":"createTransaction()","text":"<p>createTransaction(<code>dataLength</code>): <code>Promise</code>\\&lt;<code>Transaction</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:248</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#datalength","title":"dataLength","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_9","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Transaction</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#decode","title":"decode()","text":"<p>decode\\&lt;<code>T</code>&gt;(<code>header</code>, <code>data</code>, <code>key?</code>): <code>Promise</code>\\&lt;<code>T</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:178</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#t","title":"T","text":"<p><code>T</code> extends <code>BaseMessage</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_5","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#header_1","title":"header","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Kaspeak/#data_1","title":"data","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Kaspeak/#key","title":"key?","text":"<p><code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_10","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>T</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#deriveconversationkeys","title":"deriveConversationKeys()","text":"<p>deriveConversationKeys(<code>publicKey</code>): <code>ConversationKeys</code></p> <p>Defined in: sdk/kaspeak.ts:202</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_6","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#publickey_1","title":"publicKey","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt; | <code>Point</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_11","title":"Returns","text":"<p><code>ConversationKeys</code></p>"},{"location":"04-api-md/classes/Kaspeak/#encode","title":"encode()","text":"<p>encode(<code>message</code>, <code>key?</code>): <code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p> <p>Defined in: sdk/kaspeak.ts:174</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_7","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#message","title":"message","text":"<p><code>BaseMessage</code></p>"},{"location":"04-api-md/classes/Kaspeak/#key_1","title":"key?","text":"<p><code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_12","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#getaddressfrompublickey","title":"getAddressFromPublicKey()","text":"<p>getAddressFromPublicKey(<code>publicKey</code>): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:215</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_8","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#publickey_2","title":"publicKey","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt; | <code>PublicKey</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_13","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#getbalance","title":"getBalance()","text":"<p>getBalance(<code>address?</code>): <code>Promise</code>\\&lt;<code>number</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:130</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_9","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#address_1","title":"address?","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_14","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>number</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#getoutpointids","title":"getOutpointIds()","text":"<p>getOutpointIds(<code>tx</code>): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:238</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_10","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#tx","title":"tx","text":"<p><code>Transaction</code> | <code>ITransaction</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_15","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#off","title":"off()","text":"<p>off\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:164</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters_1","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#e","title":"E","text":"<p><code>E</code> extends keyof <code>KaspeakEvents</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_11","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#event","title":"event","text":"<p><code>E</code></p>"},{"location":"04-api-md/classes/Kaspeak/#listener","title":"listener","text":"<p>(<code>data</code>) =&gt; <code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#on","title":"on()","text":"<p>on\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:160</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters_2","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#e_1","title":"E","text":"<p><code>E</code> extends keyof <code>KaspeakEvents</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_12","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#event_1","title":"event","text":"<p><code>E</code></p>"},{"location":"04-api-md/classes/Kaspeak/#listener_1","title":"listener","text":"<p>(<code>data</code>) =&gt; <code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#once","title":"once()","text":"<p>once\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:168</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters_3","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#e_2","title":"E","text":"<p><code>E</code> extends keyof <code>KaspeakEvents</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_13","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#event_2","title":"event","text":"<p><code>E</code></p>"},{"location":"04-api-md/classes/Kaspeak/#listener_2","title":"listener","text":"<p>(<code>data</code>) =&gt; <code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parsepayload","title":"parsePayload()","text":"<p>parsePayload(<code>data</code>): <code>Payload</code></p> <p>Defined in: sdk/kaspeak.ts:234</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_14","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#data_2","title":"data","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_19","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Kaspeak/#registermessage","title":"registerMessage()","text":"<p>registerMessage(<code>message</code>, <code>worker?</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:182</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_15","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#message_1","title":"message","text":"<p><code>MessageClass</code></p>"},{"location":"04-api-md/classes/Kaspeak/#worker","title":"worker?","text":"<p><code>WorkerFn</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_20","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#sendtransaction","title":"sendTransaction()","text":"<p>sendTransaction(<code>transaction</code>, <code>payload</code>): <code>Promise</code>\\&lt;<code>string</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:253</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_16","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#transaction","title":"transaction","text":"<p><code>Transaction</code></p>"},{"location":"04-api-md/classes/Kaspeak/#payload_1","title":"payload","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_21","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#setprefixfilterenabled","title":"setPrefixFilterEnabled()","text":"<p>setPrefixFilterEnabled(<code>enabled</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:81</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_17","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#enabled","title":"enabled","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#setpriorityfee","title":"setPriorityFee()","text":"<p>setPriorityFee(<code>feeKAS</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:96</p> <p>Sets the priority fee in KAS (NOT SOMPI!) for transactions. The fee is converted to sompi (1 KAS = 1e8 sompi).</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_18","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#feekas","title":"feeKAS","text":"<p><code>number</code></p> <p>The priority fee in KAS.</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_23","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#throws","title":"Throws","text":"<p>Error if the fee is negative.</p>"},{"location":"04-api-md/classes/Kaspeak/#setsignatureverificationenabled","title":"setSignatureVerificationEnabled()","text":"<p>setSignatureVerificationEnabled(<code>enabled</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:85</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_19","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#enabled_1","title":"enabled","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_24","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#create","title":"create()","text":"<p><code>static</code> create(<code>privateKey</code>, <code>prefix</code>): <code>Promise</code>\\&lt;<code>Kaspeak</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:66</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_20","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#privatekey","title":"privateKey","text":"<p><code>string</code> | <code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#prefix_1","title":"prefix","text":"<p><code>string</code> = <code>\"TEST\"</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_25","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Kaspeak</code>&gt;</p>"},{"location":"04-api-md/classes/MessageHeader/","title":"MessageHeader","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / MessageHeader</p>"},{"location":"04-api-md/classes/MessageHeader/#class-messageheader","title":"Class: MessageHeader","text":"<p>Defined in: models/message-header.ts:10</p>"},{"location":"04-api-md/classes/MessageHeader/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/MessageHeader/#blockmeta","title":"blockMeta","text":"<p>blockMeta: <code>BlockMeta</code></p> <p>Defined in: models/message-header.ts:16</p>"},{"location":"04-api-md/classes/MessageHeader/#consensushash","title":"consensusHash","text":"<p>consensusHash: <code>string</code></p> <p>Defined in: models/message-header.ts:17</p>"},{"location":"04-api-md/classes/MessageHeader/#identifier","title":"identifier","text":"<p>identifier: <code>Identifier</code></p> <p>Defined in: models/message-header.ts:15</p>"},{"location":"04-api-md/classes/MessageHeader/#peer","title":"peer","text":"<p>peer: <code>Peer</code></p> <p>Defined in: models/message-header.ts:12</p>"},{"location":"04-api-md/classes/MessageHeader/#prefix","title":"prefix","text":"<p>prefix: <code>string</code></p> <p>Defined in: models/message-header.ts:13</p>"},{"location":"04-api-md/classes/MessageHeader/#txid","title":"txid","text":"<p>txid: <code>string</code></p> <p>Defined in: models/message-header.ts:11</p>"},{"location":"04-api-md/classes/MessageHeader/#type","title":"type","text":"<p>type: <code>number</code></p> <p>Defined in: models/message-header.ts:14</p>"},{"location":"04-api-md/classes/MessageHeader/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/MessageHeader/#fromtransaction","title":"fromTransaction()","text":"<p><code>static</code> fromTransaction(<code>myAddress</code>, <code>prefix</code>, <code>txid</code>, <code>address</code>, <code>payload</code>, <code>blockMeta</code>, <code>consensusHash</code>, <code>privateKey</code>): <code>MessageHeader</code></p> <p>Defined in: models/message-header.ts:37</p>"},{"location":"04-api-md/classes/MessageHeader/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/MessageHeader/#myaddress","title":"myAddress","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#prefix_1","title":"prefix","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#txid_1","title":"txid","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#address","title":"address","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#payload","title":"payload","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/MessageHeader/#blockmeta_1","title":"blockMeta","text":"<p><code>BlockMeta</code></p>"},{"location":"04-api-md/classes/MessageHeader/#consensushash_1","title":"consensusHash","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#privatekey","title":"privateKey","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/MessageHeader/#returns","title":"Returns","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Payload/","title":"Payload","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Payload</p>"},{"location":"04-api-md/classes/Payload/#class-payload","title":"Class: Payload","text":"<p>Defined in: models/payload.ts:16</p>"},{"location":"04-api-md/classes/Payload/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Payload/#constructor","title":"Constructor","text":"<p>new Payload(<code>prefix</code>, <code>type</code>, <code>identifier</code>, <code>publicKey</code>, <code>data</code>): <code>Payload</code></p> <p>Defined in: models/payload.ts:26</p>"},{"location":"04-api-md/classes/Payload/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#prefix","title":"prefix","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#type","title":"type","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Payload/#identifier","title":"identifier","text":"<p><code>Identifier</code> | <code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/Payload/#publickey","title":"publicKey","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#data","title":"data","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#returns","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Payload/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Payload/#data_1","title":"data","text":"<p>data: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:24</p>"},{"location":"04-api-md/classes/Payload/#id","title":"id","text":"<p>id: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:21</p>"},{"location":"04-api-md/classes/Payload/#marker","title":"marker","text":"<p>marker: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:17</p>"},{"location":"04-api-md/classes/Payload/#prefix_1","title":"prefix","text":"<p>prefix: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:19</p>"},{"location":"04-api-md/classes/Payload/#publickey_1","title":"publicKey","text":"<p>publicKey: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:22</p>"},{"location":"04-api-md/classes/Payload/#signature","title":"signature","text":"<p>signature: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:23</p>"},{"location":"04-api-md/classes/Payload/#type_1","title":"type","text":"<p>type: <code>number</code></p> <p>Defined in: models/payload.ts:20</p>"},{"location":"04-api-md/classes/Payload/#version","title":"version","text":"<p>version: <code>number</code></p> <p>Defined in: models/payload.ts:18</p>"},{"location":"04-api-md/classes/Payload/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Payload/#getprefix","title":"getPrefix()","text":"<p>getPrefix(): <code>string</code></p> <p>Defined in: models/payload.ts:122</p>"},{"location":"04-api-md/classes/Payload/#returns_1","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#getsize","title":"getSize()","text":"<p>getSize(): <code>number</code></p> <p>Defined in: models/payload.ts:118</p>"},{"location":"04-api-md/classes/Payload/#returns_2","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Payload/#sign","title":"sign()","text":"<p>sign(<code>outIds</code>, <code>priv</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: models/payload.ts:109</p>"},{"location":"04-api-md/classes/Payload/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#outids","title":"outIds","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Payload/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"04-api-md/classes/Payload/#tobytes","title":"toBytes()","text":"<p>toBytes(): <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:69</p>"},{"location":"04-api-md/classes/Payload/#returns_4","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#tohex","title":"toHex()","text":"<p>toHex(): <code>string</code></p> <p>Defined in: models/payload.ts:92</p>"},{"location":"04-api-md/classes/Payload/#returns_5","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#verify","title":"verify()","text":"<p>verify(<code>outIds</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: models/payload.ts:113</p>"},{"location":"04-api-md/classes/Payload/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#outids_1","title":"outIds","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p>"},{"location":"04-api-md/classes/Payload/#frombytes","title":"fromBytes()","text":"<p><code>static</code> fromBytes(<code>bytes</code>): <code>Payload</code></p> <p>Defined in: models/payload.ts:39</p>"},{"location":"04-api-md/classes/Payload/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#returns_7","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Payload/#fromhex","title":"fromHex()","text":"<p><code>static</code> fromHex(<code>data</code>): <code>Payload</code></p> <p>Defined in: models/payload.ts:65</p>"},{"location":"04-api-md/classes/Payload/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#data_2","title":"data","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#returns_8","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Peer/","title":"Peer","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Peer</p>"},{"location":"04-api-md/classes/Peer/#class-peer","title":"Class: Peer","text":"<p>Defined in: crypto/peer.ts:4</p>"},{"location":"04-api-md/classes/Peer/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Peer/#constructor","title":"Constructor","text":"<p>new Peer(<code>address</code>, <code>publicKey</code>, <code>signature</code>, <code>isOwn</code>, <code>privateKey</code>): <code>Peer</code></p> <p>Defined in: crypto/peer.ts:14</p>"},{"location":"04-api-md/classes/Peer/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Peer/#address","title":"address","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Peer/#publickey","title":"publicKey","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#signature","title":"signature","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#isown","title":"isOwn","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Peer/#privatekey","title":"privateKey","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Peer/#returns","title":"Returns","text":"<p><code>Peer</code></p>"},{"location":"04-api-md/classes/Peer/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Peer/#address_1","title":"address","text":"<p><code>readonly</code> address: <code>string</code></p> <p>Defined in: crypto/peer.ts:5</p>"},{"location":"04-api-md/classes/Peer/#isown_1","title":"isOwn","text":"<p><code>readonly</code> isOwn: <code>boolean</code></p> <p>Defined in: crypto/peer.ts:8</p>"},{"location":"04-api-md/classes/Peer/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/Peer/#chainkey","title":"chainKey","text":""},{"location":"04-api-md/classes/Peer/#get-signature","title":"Get Signature","text":"<p>get chainKey(): <code>bigint</code></p> <p>Defined in: crypto/peer.ts:40</p>"},{"location":"04-api-md/classes/Peer/#returns_1","title":"Returns","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Peer/#publickey_1","title":"publicKey","text":""},{"location":"04-api-md/classes/Peer/#get-signature_1","title":"Get Signature","text":"<p>get publicKey(): <code>Uint8Array</code></p> <p>Defined in: crypto/peer.ts:22</p>"},{"location":"04-api-md/classes/Peer/#returns_2","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#sharedsecret","title":"sharedSecret","text":""},{"location":"04-api-md/classes/Peer/#get-signature_2","title":"Get Signature","text":"<p>get sharedSecret(): <code>Uint8Array</code></p> <p>Defined in: crypto/peer.ts:35</p>"},{"location":"04-api-md/classes/Peer/#returns_3","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#signature_1","title":"signature","text":""},{"location":"04-api-md/classes/Peer/#get-signature_3","title":"Get Signature","text":"<p>get signature(): <code>Uint8Array</code></p> <p>Defined in: crypto/peer.ts:26</p>"},{"location":"04-api-md/classes/Peer/#returns_4","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/","title":"Point","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Point</p>"},{"location":"04-api-md/classes/Point/#class-point","title":"Class: Point","text":"<p>Defined in: crypto/secp256k1.ts:59</p>"},{"location":"04-api-md/classes/Point/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Point/#constructor","title":"Constructor","text":"<p>new Point(<code>x</code>, <code>y</code>, <code>z</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:60</p>"},{"location":"04-api-md/classes/Point/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#x","title":"x","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#y","title":"y","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#z","title":"z","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#returns","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Point/#x_1","title":"x","text":"<p><code>readonly</code> x: <code>bigint</code></p> <p>Defined in: crypto/secp256k1.ts:61</p>"},{"location":"04-api-md/classes/Point/#y_1","title":"y","text":"<p><code>readonly</code> y: <code>bigint</code></p> <p>Defined in: crypto/secp256k1.ts:62</p>"},{"location":"04-api-md/classes/Point/#z_1","title":"z","text":"<p><code>readonly</code> z: <code>bigint</code></p> <p>Defined in: crypto/secp256k1.ts:63</p>"},{"location":"04-api-md/classes/Point/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Point/#equals","title":"equals()","text":"<p>equals(<code>other</code>): <code>boolean</code></p> <p>Defined in: crypto/secp256k1.ts:92</p>"},{"location":"04-api-md/classes/Point/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#other","title":"other","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Point/#negate","title":"negate()","text":"<p>negate(): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:96</p>"},{"location":"04-api-md/classes/Point/#returns_2","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#toaffine","title":"toAffine()","text":"<p>toAffine(): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:100</p>"},{"location":"04-api-md/classes/Point/#returns_3","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#tocompressed","title":"toCompressed()","text":"<p>toCompressed(): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:113</p>"},{"location":"04-api-md/classes/Point/#returns_4","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#torawx","title":"toRawX()","text":"<p>toRawX(): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:135</p>"},{"location":"04-api-md/classes/Point/#returns_5","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#touncompressed","title":"toUncompressed()","text":"<p>toUncompressed(): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:123</p>"},{"location":"04-api-md/classes/Point/#returns_6","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#basepoint","title":"basePoint()","text":"<p><code>static</code> basePoint(): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:70</p>"},{"location":"04-api-md/classes/Point/#returns_7","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#fromaffine","title":"fromAffine()","text":"<p><code>static</code> fromAffine(<code>x</code>, <code>y</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:66</p>"},{"location":"04-api-md/classes/Point/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#x_2","title":"x","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#y_2","title":"y","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#returns_8","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#frombytes","title":"fromBytes()","text":"<p><code>static</code> fromBytes(<code>publicKey</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:74</p>"},{"location":"04-api-md/classes/Point/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#publickey","title":"publicKey","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#returns_9","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#fromhex","title":"fromHex()","text":"<p><code>static</code> fromHex(<code>publicKey</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:88</p>"},{"location":"04-api-md/classes/Point/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#publickey_1","title":"publicKey","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Point/#returns_10","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Schnorr/","title":"Schnorr","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Schnorr</p>"},{"location":"04-api-md/classes/Schnorr/#class-schnorr","title":"Class: Schnorr","text":"<p>Defined in: crypto/signatures.ts:42</p>"},{"location":"04-api-md/classes/Schnorr/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Schnorr/#constructor","title":"Constructor","text":"<p>new Schnorr(): <code>Schnorr</code></p>"},{"location":"04-api-md/classes/Schnorr/#returns","title":"Returns","text":"<p><code>Schnorr</code></p>"},{"location":"04-api-md/classes/Schnorr/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Schnorr/#sign","title":"sign()","text":"<p><code>static</code> sign(<code>msg</code>, <code>priv</code>): <code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p> <p>Defined in: crypto/signatures.ts:43</p>"},{"location":"04-api-md/classes/Schnorr/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Schnorr/#msg","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#verify","title":"verify()","text":"<p><code>static</code> verify(<code>signature</code>, <code>msg</code>, <code>publicKey</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: crypto/signatures.ts:52</p>"},{"location":"04-api-md/classes/Schnorr/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Schnorr/#signature","title":"signature","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Schnorr/#msg_1","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#publickey","title":"publicKey","text":"<p><code>string</code> | <code>Point</code></p>"},{"location":"04-api-md/classes/Schnorr/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/","title":"Secp256k1","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Secp256k1</p>"},{"location":"04-api-md/classes/Secp256k1/#class-secp256k1","title":"Class: Secp256k1","text":"<p>Defined in: crypto/secp256k1.ts:141</p>"},{"location":"04-api-md/classes/Secp256k1/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Secp256k1/#constructor","title":"Constructor","text":"<p>new Secp256k1(): <code>Secp256k1</code></p>"},{"location":"04-api-md/classes/Secp256k1/#returns","title":"Returns","text":"<p><code>Secp256k1</code></p>"},{"location":"04-api-md/classes/Secp256k1/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Secp256k1/#infinity","title":"Infinity","text":"<p><code>readonly</code> <code>static</code> Infinity: <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:142</p>"},{"location":"04-api-md/classes/Secp256k1/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Secp256k1/#computey","title":"computeY()","text":"<p><code>static</code> computeY(<code>x</code>, <code>isOdd</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:144</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#x","title":"x","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Secp256k1/#isodd","title":"isOdd","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Secp256k1/#returns_1","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#getpub","title":"getPub()","text":"<p><code>static</code> getPub(<code>priv</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:162</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/#returns_2","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#getsharedsecret","title":"getSharedSecret()","text":"<p><code>static</code> getSharedSecret(<code>privA</code>, <code>pubB</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:166</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#priva","title":"privA","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/#pubb","title":"pubB","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#returns_3","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Secp256k1/#mul","title":"mul()","text":"<p><code>static</code> mul(<code>p</code>, <code>priv</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:151</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#p","title":"p","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#priv_1","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/#returns_4","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/","title":"SecretIdentifier","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / SecretIdentifier</p>"},{"location":"04-api-md/classes/SecretIdentifier/#class-secretidentifier","title":"Class: SecretIdentifier","text":"<p>Defined in: crypto/identifier.ts:166</p> <p>SecretIdentifier</p> <p>Identifier that additionally stores its private scalar.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#creation","title":"Creation","text":"<ul> <li><code>fromSecret()</code> \u2013 wrap an existing secret (bigint / bytes / hex).</li> <li><code>random()</code>     \u2013 generate a new cryptographically secure secret.</li> </ul>"},{"location":"04-api-md/classes/SecretIdentifier/#extra-capability","title":"Extra capability","text":"<ul> <li><code>sign()</code> \u2013 produce a Schnorr signature for arbitrary data.</li> </ul> <p>Public-only factories inherited from Identifier are disabled to emphasise that a SecretIdentifier must originate from a secret, not from public material.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#extends","title":"Extends","text":"<ul> <li><code>Identifier</code></li> </ul>"},{"location":"04-api-md/classes/SecretIdentifier/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/SecretIdentifier/#hex","title":"hex","text":"<p><code>readonly</code> hex: <code>string</code></p> <p>Defined in: crypto/identifier.ts:30</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from","title":"Inherited from","text":"<p><code>Identifier</code>.<code>hex</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#secret","title":"secret","text":"<p><code>readonly</code> secret: <code>bigint</code></p> <p>Defined in: crypto/identifier.ts:167</p>"},{"location":"04-api-md/classes/SecretIdentifier/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/SecretIdentifier/#bytes","title":"bytes","text":""},{"location":"04-api-md/classes/SecretIdentifier/#get-signature","title":"Get Signature","text":"<p>get bytes(): <code>Uint8Array</code></p> <p>Defined in: crypto/identifier.ts:82</p> <p>Retrieves a copy of the internal byte array.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p> <p>A new <code>Uint8Array</code> instance containing the bytes.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_1","title":"Inherited from","text":"<p><code>Identifier</code>.<code>bytes</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/SecretIdentifier/#equals","title":"equals()","text":"<p>equals(<code>other</code>): <code>boolean</code></p> <p>Defined in: crypto/identifier.ts:97</p> <p>Determines whether this identifier is equal to another by comparing their hexadecimal representations.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#other","title":"other","text":"<p><code>Identifier</code></p> <p>The identifier to compare with this instance.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p>True if both identifiers have the same hexadecimal string; otherwise, false.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_2","title":"Inherited from","text":"<p><code>Identifier</code>.<code>equals</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#next","title":"next()","text":"<p>next(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:114</p> <p>Jump forward <code>count</code> positions in the chain: <code>ID_(i+count) = ID_i \u00b7 chainKey^count</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#chainkey","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#count","title":"count","text":"<p>How many messages ahead (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_2","title":"Returns","text":"<p><code>Identifier</code></p> <p>Next identifier in the sequence.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_3","title":"Inherited from","text":"<p><code>Identifier</code>.<code>next</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#prev","title":"prev()","text":"<p>prev(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:129</p> <p>Jump backward <code>count</code> positions in the chain: <code>ID_(i-count) = ID_i \u00b7 chainKey_inv^count</code> (section 4, bullet 2).</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#chainkey_1","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#count_1","title":"count","text":"<p>How many messages back (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_3","title":"Returns","text":"<p><code>Identifier</code></p> <p>Previous identifier in the sequence.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_4","title":"Inherited from","text":"<p><code>Identifier</code>.<code>prev</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#sign","title":"sign()","text":"<p>sign(<code>msg</code>): <code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p> <p>Defined in: crypto/identifier.ts:208</p> <p>Produce Schnorr signature of <code>msg</code> with the stored secret scalar.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#msg","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#verify","title":"verify()","text":"<p>verify(<code>sig</code>, <code>msg</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: crypto/identifier.ts:143</p> <p>Verifies the provided signature against the message using the Schnorr algorithm.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#sig","title":"sig","text":"<p><code>Uint8Array</code></p> <p>The signature to verify, represented as a Uint8Array.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#msg_1","title":"msg","text":"<p>The message to validate, which can be either a string or a Uint8Array.</p> <p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>A Promise that resolves to a boolean indicating whether the signature is valid.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_5","title":"Inherited from","text":"<p><code>Identifier</code>.<code>verify</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#frombytes","title":"~~fromBytes()~~","text":"<p><code>static</code> fromBytes(<code>_</code>): <code>never</code></p> <p>Defined in: crypto/identifier.ts:193</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_5","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#_","title":"_","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_6","title":"Returns","text":"<p><code>never</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#deprecated","title":"Deprecated","text":"<p>not available on SecretIdentifier. Use Identifier instead.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#overrides","title":"Overrides","text":"<p><code>Identifier</code>.<code>fromBytes</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#fromchainkey","title":"~~fromChainKey()~~","text":"<p><code>static</code> fromChainKey(): <code>never</code></p> <p>Defined in: crypto/identifier.ts:198</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_7","title":"Returns","text":"<p><code>never</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#deprecated_1","title":"Deprecated","text":"<p>not available on SecretIdentifier. Use Identifier instead.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#overrides_1","title":"Overrides","text":"<p><code>Identifier</code>.<code>fromChainKey</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#fromhex","title":"~~fromHex()~~","text":"<p><code>static</code> fromHex(<code>_</code>): <code>never</code></p> <p>Defined in: crypto/identifier.ts:188</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_6","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#__1","title":"_","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_8","title":"Returns","text":"<p><code>never</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#deprecated_2","title":"Deprecated","text":"<p>not available on SecretIdentifier. Use Identifier instead.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#overrides_2","title":"Overrides","text":"<p><code>Identifier</code>.<code>fromHex</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#fromsecret","title":"fromSecret()","text":"<p><code>static</code> fromSecret(<code>secret</code>): <code>SecretIdentifier</code></p> <p>Defined in: crypto/identifier.ts:176</p> <p>Wrap existing secret (bigint | number | bytes | hex).</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_7","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#secret_1","title":"secret","text":"<p><code>string</code> | <code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_9","title":"Returns","text":"<p><code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#random","title":"random()","text":"<p><code>static</code> random(): <code>SecretIdentifier</code></p> <p>Defined in: crypto/identifier.ts:203</p> <p>Generate random 32-byte secret (cryptographically secure RNG).</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_10","title":"Returns","text":"<p><code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/UnknownMessage/","title":"UnknownMessage","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / UnknownMessage</p>"},{"location":"04-api-md/classes/UnknownMessage/#class-unknownmessage","title":"Class: UnknownMessage","text":"<p>Defined in: models/messages/unknown-message.ts:3</p>"},{"location":"04-api-md/classes/UnknownMessage/#extends","title":"Extends","text":"<ul> <li><code>BaseMessage</code></li> </ul>"},{"location":"04-api-md/classes/UnknownMessage/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/UnknownMessage/#constructor","title":"Constructor","text":"<p>new UnknownMessage(<code>rawData</code>, <code>errorDesc</code>, <code>code</code>): <code>UnknownMessage</code></p> <p>Defined in: models/messages/unknown-message.ts:8</p>"},{"location":"04-api-md/classes/UnknownMessage/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/UnknownMessage/#rawdata","title":"rawData","text":"<p><code>null</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/UnknownMessage/#errordesc","title":"errorDesc","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#code","title":"code","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#returns","title":"Returns","text":"<p><code>UnknownMessage</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#overrides","title":"Overrides","text":"<p><code>BaseMessage</code>.<code>constructor</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/UnknownMessage/#code_1","title":"code","text":"<p>code: <code>null</code> | <code>number</code></p> <p>Defined in: models/messages/unknown-message.ts:6</p>"},{"location":"04-api-md/classes/UnknownMessage/#errordesc_1","title":"errorDesc","text":"<p>errorDesc: <code>null</code> | <code>string</code></p> <p>Defined in: models/messages/unknown-message.ts:5</p>"},{"location":"04-api-md/classes/UnknownMessage/#header","title":"header?","text":"<p><code>optional</code> header: <code>MessageHeader</code></p> <p>Defined in: models/messages/base-message.ts:6</p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>header</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#rawdata_1","title":"rawData","text":"<p>rawData: <code>null</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p> <p>Defined in: models/messages/unknown-message.ts:4</p>"},{"location":"04-api-md/classes/UnknownMessage/#messagetype","title":"messageType","text":"<p><code>static</code> messageType: <code>number</code> = <code>-1</code></p> <p>Defined in: models/messages/base-message.ts:5</p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_1","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>messageType</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#requiresencryption","title":"requiresEncryption","text":"<p><code>static</code> requiresEncryption: <code>boolean</code> = <code>false</code></p> <p>Defined in: models/messages/base-message.ts:4</p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_2","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>requiresEncryption</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/UnknownMessage/#messagetype_1","title":"messageType","text":""},{"location":"04-api-md/classes/UnknownMessage/#get-signature","title":"Get Signature","text":"<p>get messageType(): <code>number</code></p> <p>Defined in: models/messages/base-message.ts:16</p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_3","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>messageType</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#requiresencryption_1","title":"requiresEncryption","text":""},{"location":"04-api-md/classes/UnknownMessage/#get-signature_1","title":"Get Signature","text":"<p>get requiresEncryption(): <code>boolean</code></p> <p>Defined in: models/messages/base-message.ts:12</p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_4","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>requiresEncryption</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/UnknownMessage/#fromplainobject","title":"fromPlainObject()","text":"<p>fromPlainObject(<code>_obj</code>): <code>void</code></p> <p>Defined in: models/messages/unknown-message.ts:23</p>"},{"location":"04-api-md/classes/UnknownMessage/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/UnknownMessage/#_obj","title":"_obj","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#overrides_1","title":"Overrides","text":"<p><code>BaseMessage</code>.<code>fromPlainObject</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#toplainobject","title":"toPlainObject()","text":"<p>toPlainObject(): <code>any</code></p> <p>Defined in: models/messages/unknown-message.ts:15</p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_4","title":"Returns","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#overrides_2","title":"Overrides","text":"<p><code>BaseMessage</code>.<code>toPlainObject</code></p>"},{"location":"04-api-md/functions/bytesToHex/","title":"bytesToHex","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / bytesToHex</p>"},{"location":"04-api-md/functions/bytesToHex/#function-bytestohex","title":"Function: bytesToHex()","text":"<p>bytesToHex(<code>bytes</code>, <code>byteSize?</code>): <code>string</code></p> <p>Defined in: crypto/utils.ts:144</p>"},{"location":"04-api-md/functions/bytesToHex/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/bytesToHex/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/bytesToHex/#bytesize","title":"byteSize?","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/bytesToHex/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/bytesToInt/","title":"bytesToInt","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / bytesToInt</p>"},{"location":"04-api-md/functions/bytesToInt/#function-bytestoint","title":"Function: bytesToInt()","text":"<p>bytesToInt(<code>bytes</code>): <code>bigint</code></p> <p>Defined in: crypto/utils.ts:160</p>"},{"location":"04-api-md/functions/bytesToInt/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/bytesToInt/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/bytesToInt/#returns","title":"Returns","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/functions/hexToBytes/","title":"hexToBytes","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / hexToBytes</p>"},{"location":"04-api-md/functions/hexToBytes/#function-hextobytes","title":"Function: hexToBytes()","text":"<p>hexToBytes(<code>hex</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/utils.ts:150</p>"},{"location":"04-api-md/functions/hexToBytes/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/hexToBytes/#hex","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/hexToBytes/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/hexToInt/","title":"hexToInt","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / hexToInt</p>"},{"location":"04-api-md/functions/hexToInt/#function-hextoint","title":"Function: hexToInt()","text":"<p>hexToInt(<code>hex</code>): <code>bigint</code></p> <p>Defined in: crypto/utils.ts:176</p>"},{"location":"04-api-md/functions/hexToInt/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/hexToInt/#hex","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/hexToInt/#returns","title":"Returns","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/functions/intToBytes/","title":"intToBytes","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / intToBytes</p>"},{"location":"04-api-md/functions/intToBytes/#function-inttobytes","title":"Function: intToBytes()","text":"<p>intToBytes(<code>integer</code>, <code>byteSize?</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/utils.ts:170</p>"},{"location":"04-api-md/functions/intToBytes/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/intToBytes/#integer","title":"integer","text":"<p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/functions/intToBytes/#bytesize","title":"byteSize?","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/intToBytes/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/intToHex/","title":"intToHex","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / intToHex</p>"},{"location":"04-api-md/functions/intToHex/#function-inttohex","title":"Function: intToHex()","text":"<p>intToHex(<code>a</code>, <code>byteSize?</code>): <code>string</code></p> <p>Defined in: crypto/utils.ts:164</p>"},{"location":"04-api-md/functions/intToHex/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/intToHex/#a","title":"a","text":"<p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/functions/intToHex/#bytesize","title":"byteSize?","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/intToHex/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/randomBytes/","title":"randomBytes","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / randomBytes</p>"},{"location":"04-api-md/functions/randomBytes/#function-randombytes","title":"Function: randomBytes()","text":"<p>randomBytes(<code>n</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/utils.ts:19</p>"},{"location":"04-api-md/functions/randomBytes/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/randomBytes/#n","title":"n","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/randomBytes/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/setLogLevel/","title":"setLogLevel","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / setLogLevel</p>"},{"location":"04-api-md/functions/setLogLevel/#function-setloglevel","title":"Function: setLogLevel()","text":"<p>setLogLevel(<code>level</code>): <code>void</code></p> <p>Defined in: utils/logger.ts:53</p>"},{"location":"04-api-md/functions/setLogLevel/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/setLogLevel/#level","title":"level","text":"<p><code>LogLevelDesc</code></p>"},{"location":"04-api-md/functions/setLogLevel/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/interfaces/BlockMeta/","title":"BlockMeta","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / BlockMeta</p>"},{"location":"04-api-md/interfaces/BlockMeta/#interface-blockmeta","title":"Interface: BlockMeta","text":"<p>Defined in: models/message-header.ts:4</p>"},{"location":"04-api-md/interfaces/BlockMeta/#properties","title":"Properties","text":""},{"location":"04-api-md/interfaces/BlockMeta/#daascore","title":"daaScore","text":"<p>daaScore: <code>bigint</code></p> <p>Defined in: models/message-header.ts:7</p>"},{"location":"04-api-md/interfaces/BlockMeta/#hash","title":"hash","text":"<p>hash: <code>string</code></p> <p>Defined in: models/message-header.ts:5</p>"},{"location":"04-api-md/interfaces/BlockMeta/#timestamp","title":"timestamp","text":"<p>timestamp: <code>bigint</code></p> <p>Defined in: models/message-header.ts:6</p>"},{"location":"05-meta/changelog/","title":"\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439","text":""},{"location":"05-meta/changelog/#001-2025-07-03","title":"0.0.1 \u2014 2025-07-03","text":"<ul> <li>First public SDK release</li> </ul>"},{"location":"05-meta/contributing/","title":"How to Contribute","text":"<ol> <li>Fork the repository.</li> <li>Create a branch named <code>feature/your-feature</code>.</li> <li>Submit a Pull Request following the TypeScript-lint style.</li> <li>One PR per feature.</li> </ol> <p>If you develop something based on Kaspeak SDK, feel free to let us know. We will gladly share the news in our README and community.</p>"},{"location":"05-meta/contributing/#contacts-and-discussions","title":"Contacts and Discussions","text":"Channel Link Support https://t.me/kaspeak_support Chat (RU) https://t.me/kaspeak_ru Chat (EN) https://t.me/kaspeak_en Twitter / X https://x.com/KaspeakOfficial Email kaspeak@proton.me"},{"location":"ru/","title":"Kaspeak SDK","text":"<p>Kaspeak SDK \u2014 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0438 \u0443\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 \u0431\u0430\u0437\u0435 BlockDAG Kaspa. SDK \u0431\u0435\u0440\u0451\u0442 \u043d\u0430 \u0441\u0435\u0431\u044f \u0432\u0441\u0435 \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0438 \u043f\u0440\u0438\u0451\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438 \u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044e.</p>"},{"location":"ru/#sdk","title":"\u0427\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e SDK","text":"<ul> <li>\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0438\u043b\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 Kaspa;</li> <li>\u041b\u0435\u0433\u043a\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0438 \u043a\u043e\u043b\u043b\u0431\u0435\u043a\u0430\u043c\u0438;</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0440\u0441\u0442\u0432\u0430 (ECDH, XChaCha20-Poly1305, Schnorr);</li> <li>\u041c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 CBOR \u0438 \u0441\u0436\u0430\u0442\u0438\u044e Zstandard;</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0438\u0430\u043b\u043e\u0433\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432;</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435, \u0442\u0430\u043a \u0438 \u043d\u0430 Node.js \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0438\u043b\u0438\u0439.</li> </ul> <p>Kaspeak SDK \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0430\u0441 \u043e\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0435\u0442\u0430\u043b\u044f\u0445 \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438. \u0421\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u044c\u0442\u0435\u0441\u044c \u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043c\u044b \u0432\u0437\u044f\u043b\u0438 \u043d\u0430 \u0441\u0435\u0431\u044f.</p> <p>\u041f\u043e\u0434\u043d\u0438\u043c\u0430\u0439\u0442\u0435 \u0447\u0430\u0442, \u0438\u0433\u0440\u0443, \u0431\u043e\u0442\u0430 \u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u044f\u043c\u043e \u0432 \u0441\u0435\u0442\u0438 Kaspa. \u0411\u044b\u0441\u0442\u0440\u043e, \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e, \u0431\u0435\u0437 \u043f\u043e\u0441\u0440\u0435\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 \u0446\u0435\u043d\u0437\u0443\u0440\u044b.</p>"},{"location":"ru/01-overview/intro/","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>Kaspeak SDK \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 Web3-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 \u0441\u0435\u0442\u0438 Kaspa. \u042d\u0442\u043e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043e\u0431\u043c\u0435\u043d\u0443 \u043b\u044e\u0431\u044b\u043c\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u2014 \u0442\u0435\u043a\u0441\u0442\u043e\u043c, \u0444\u0430\u0439\u043b\u0430\u043c\u0438, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u2014 \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u043e \u0438 \u043f\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0446\u0435\u043d\u0435.</p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Kaspeak SDK, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0438\u043b\u0438 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435. SDK \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u044b\u043c API \u0438 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438.</p>"},{"location":"ru/01-overview/intro/#sdk","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 SDK","text":"<ul> <li>\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c: \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u0430\u044f \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430 \u0441\u0447\u0451\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0442\u0438 Kaspa.</li> <li>\u041d\u0438\u0437\u043a\u0438\u0435 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438: \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 (CBOR + Zstandard).</li> <li>\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c: \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0445\u0435\u043c\u044b (ECDH, XChaCha20-Poly1305, Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u0438).</li> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438: \u0435\u0434\u0438\u043d\u044b\u0439 SDK \u0434\u043b\u044f \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u0438 Node.js \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c API.</li> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e: \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439.</li> </ul> <p>Kaspeak SDK \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438:</p> <ul> <li>\u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0438 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0430\u0442\u043e\u0432,</li> <li>\u0438\u0433\u0440 \u0438 \u0438\u0433\u0440\u043e\u0432\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432,</li> <li>\u0441\u0438\u0441\u0442\u0435\u043c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0438 \u043e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u0439,</li> <li>\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u0430\u043c\u0438,</li> <li>\u043b\u044e\u0431\u044b\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</li> </ul> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0449\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u0447\u0442\u043e\u0431\u044b \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e \u0437\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u043e\u0432 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u043d\u0430 \u0431\u0430\u0437\u0435 \u0441\u0435\u0442\u0438 Kaspa, Kaspeak SDK \u0441\u0442\u0430\u043d\u0435\u0442 \u0432\u0430\u0448\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u043c \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u043e\u043c.</p> <p>\u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u2014 Web3 \u0435\u0449\u0451 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0431\u044b\u043b \u0442\u0430\u043a\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c!</p>"},{"location":"ru/01-overview/quick-start/","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Kaspeak SDK \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0441\u0435\u0442\u0438 <code>TESTNET-10</code>, \u043d\u043e \u043d\u0438\u0447\u0442\u043e \u043d\u0435 \u043c\u0435\u0448\u0430\u0435\u0442 \u0412\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>MAINET</code> \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0412\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e TKAS \u0432 <code>TESTNET-10</code>, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043a\u0440\u0430\u043d\u0443.</p>"},{"location":"ru/01-overview/quick-start/#_2","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code>pnpm add kaspeak-sdk\n</code></pre>"},{"location":"ru/01-overview/quick-start/#_3","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<pre><code>const { Kaspeak } = require(\"kaspeak-sdk\");\n\nconst PREFIX = \"TEST\"\nconst PRIV_KEY = 6\n\nconst sdk = await Kaspeak.create(PRIV_KEY, PREFIX);\nawait sdk.connect();\n</code></pre> <p><code>PREFIX</code> \u044d\u0442\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d 4 \u0431\u0430\u0439\u0442\u0430\u043c\u0438. \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0435\u043c\u0443, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 SDK \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0442\u044c\u0441\u044f \u0441 \u0412\u0430\u0448\u0438\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438.</p>"},{"location":"ru/01-overview/quick-start/#_4","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0438 \u043f\u0440\u0438\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043d\u0435\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass ExampleMessage extends BaseMessage {\n    static requiresEncryption = false;\n    static messageType = 1;\n\n    constructor(foo = \"\", bar = \"\", header) {\n        super(header);\n        this.foo = foo;\n        this.bar = bar;\n    }\n\n    toPlainObject() {\n        return { f: this.foo, b: this.bar };\n    }\n\n    fromPlainObject(obj) {\n        this.foo = obj.f ?? \"\";\n        this.bar = obj.b ?? \"\";\n    }\n}\n\nconst PREFIX = \"TEST\";\nconst PRIV_KEY = 6;\nconst NETWORK_ID = \"testnet-10\";\n\nlet sdk;\n\nasync function exampleHandler(header, raw) {\n    const msg = await sdk.decode(header, raw);\n    console.log(\"Foo:\", msg.foo, \"Bar:\", msg.bar);\n}\n\nasync function main() {\n    sdk = await Kaspeak.create(PRIV_KEY, PREFIX);\n    await sdk.connect(NETWORK_ID);\n    console.log(\"Public key:\", sdk.publicKey);\n    console.log(\"Address:\", sdk.address);\n\n    sdk.registerMessage(ExampleMessage, exampleHandler);\n\n    const msg = new ExampleMessage(\"hello\", \"world\");\n    const encoded = await sdk.encode(msg);\n    const identifier = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(encoded.length);\n    const opIds = sdk.getOutpointIds(tx);\n    const payload = await sdk.createPayload(opIds, ExampleMessage.messageType, identifier, encoded);\n    await sdk.sendTransaction(tx, payload);\n}\n\nmain();\n</code></pre> <p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>NETWORK_ID = \"mainnet\"</code></p> <p>\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u041d\u0415 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u043e \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044e.</p>"},{"location":"ru/02-core/crypto/","title":"\u041a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f (\u043e\u0431\u0437\u043e\u0440)","text":"<p>Kaspeak SDK \u043e\u043f\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p> \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 secp256k1 @noble/secp256k1 + \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0451\u0440\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u044e\u0447\u0435\u0439, ECDH Schnorr kaspa-wasm \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 payload-\u043e\u0432 XChaCha20-Poly1305 @stablelib/xchacha20poly1305 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 SHA-256 @noble/hashes \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Zstandard @bokuweb/zstd-wasm \u0441\u0436\u0430\u0442\u0438\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 CBOR cborg \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0435 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 <p>\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0445\u0435\u043c\u044b \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u044b \u0432 \u0440\u0430\u0437\u0434\u0435\u043b \u00ab\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0435\u043c\u044b\u00bb:</p> <ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u2014 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u0442\u043e\u0447\u0435\u043a, \u043f\u043e\u0434\u043f\u0438\u0441\u0438, \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435.  </li> <li>\u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u2014 \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440 \u00ab\u043e\u0431\u044a\u0435\u043a\u0442 &gt; CBOR &gt; Zstd &gt; XChaCha20\u00bb.</li> </ul>"},{"location":"ru/02-core/messages/","title":"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":""},{"location":"ru/02-core/messages/#_1","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0439 <code>BaseMessage</code>.</li> <li>\u041e\u0431\u044a\u044f\u0432\u0438\u0442\u0435 \u0434\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430:  <ul> <li><code>messageType</code> \u2014 \u0446\u0435\u043b\u043e\u0435 <code>0\u202665535</code>, \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</li> <li><code>requiresEncryption</code> \u2014 <code>true</code>, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f.</li> </ul> </li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434\u044b <code>toPlainObject()</code> \u0438 <code>fromPlainObject(obj)</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u044e\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0432 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e.</li> <li>(\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u0435-\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443.</li> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0442\u0438\u043f \u043a \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u043e\u043c <code>sdk.registerMessage()</code>; \u0442\u0443\u0434\u0430 \u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0431\u0435\u043a-\u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ol>"},{"location":"ru/02-core/messages/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0435\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass MyMessage extends BaseMessage {\n    static requiresEncryption = false;\n    static messageType = 100;\n\n    constructor(foo = \"\", bar = \"\", header) {\n        super(header);\n        this.foo = foo;\n        this.bar = bar;\n    }\n\n    toPlainObject() {\n        return { f: this.foo, b: this.bar };\n    }\n\n    fromPlainObject(obj) {\n        this.foo = obj.f ?? \"\";\n        this.bar = obj.b ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(MyMessage, async (h, raw) =&gt; {\n        const msg = await sdk.decode(h, raw);\n        console.log(msg.foo, msg.bar);\n    });\n\n    const msg = new MyMessage(\"hello\", \"world\");\n    const body = await sdk.encode(msg);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, MyMessage.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre>"},{"location":"ru/02-core/messages/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(SecretNote, async (h, raw) =&gt; {\n        const secret = h.peer.sharedSecret;\n        const note = await sdk.decode(h, raw, secret);\n        console.log(note.text);\n    });\n\n    const conversationKeys = sdk.deriveConversationKeys(sdk.publicKey);\n    const note = new SecretNote(\"I love Kaspa!\");\n    const body = await sdk.encode(note, conversationKeys.secret);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, SecretNote.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre> <p>\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u043e\u043c\u0443 \u0441\u0435\u0431\u0435. \u0415\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u0433\u043e-\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e, \u0432\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0432 <code>deriveConversationKeys</code> \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f.</p>"},{"location":"ru/02-core/messages/#_4","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438","text":"<ul> <li>\u0421\u043e\u043a\u0440\u0430\u0449\u0430\u0439\u0442\u0435 \u043a\u043b\u044e\u0447\u0438 \u0432 <code>toPlainObject</code> \u0438 <code>fromPlainObject</code>, \u0447\u0442\u043e\u0431\u044b \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c CBOR-\u043f\u0430\u043a\u0435\u0442.</li> <li>\u041f\u0440\u0438 <code>requiresEncryption = true</code> \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043a\u043b\u044e\u0447 \u0438 \u0432 <code>encode</code>, \u0438 \u0432 <code>decode</code>.</li> </ul>"},{"location":"ru/02-core/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 Kaspeak SDK \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0438 \u043f\u0440\u0438\u0451\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p>"},{"location":"ru/02-core/models/#payload","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 Payload","text":"<p><code>Payload</code> \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e Kaspa. \u041a\u0430\u0436\u0434\u044b\u0439 payload \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 (\u0434\u0430\u043d\u043d\u044b\u0435) \u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.</p> <p>Payload \u0432\u0441\u0435\u0433\u0434\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u0430\u0440\u043a\u0435\u0440\u0430 <code>KSPK</code> (0x4B53454B).</p>"},{"location":"ru/02-core/models/#payload-","title":"\u0424\u043e\u0440\u043c\u0430\u0442 payload-\u0430","text":"\u0421\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u041f\u043e\u043b\u0435 \u0420\u0430\u0437\u043c\u0435\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 0 marker 4 \u041c\u0430\u0440\u043a\u0435\u0440 <code>KSPK</code> (\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 SDK) 4 version 1 \u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 (\u0441\u0435\u0439\u0447\u0430\u0441 = 1) 5 prefix 4 \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (ASCII) 9 type 2 \u0422\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (<code>messageType</code>) 11 id 33 \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 (<code>Identifier</code>) \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f 44 publicKey 33 \u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f 77 signature 64 Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u044c payload-\u0430 141 dataLen 2 \u0414\u043b\u0438\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445) 143 data N \u0414\u0430\u043d\u043d\u044b\u0435 (CBOR, \u0441\u0436\u0430\u0442\u044b\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435)"},{"location":"ru/02-core/models/#peer","title":"\u041e\u0431\u044a\u0435\u043a\u0442 Peer","text":"<p><code>Peer</code> \u2014 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041e\u043d \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u043c \u043a\u043b\u044e\u0447\u0435 \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u043c \u043e\u0431\u0449\u0435\u043c \u0441\u0435\u043a\u0440\u0435\u0442\u0435 (\u0434\u043b\u044f \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439).</p>"},{"location":"ru/02-core/models/#peer_1","title":"\u041f\u043e\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Peer</code>","text":"\u041f\u043e\u043b\u0435 \u0422\u0438\u043f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>address</code> <code>string</code> \u0410\u0434\u0440\u0435\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f (Kaspa-\u0430\u0434\u0440\u0435\u0441) <code>publicKey</code> <code>Uint8Array</code> \u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f (secp256k1, 33 \u0431\u0430\u0439\u0442\u0430) <code>signature</code> <code>Uint8Array</code> Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u044c payload-\u0430 <code>isOwn</code> <code>boolean</code> <code>true</code>, \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u0430\u043c\u0438\u043c SDK <code>sharedSecret</code> <code>Uint8Array</code> \u041e\u0431\u0449\u0438\u0439 \u0441\u0435\u043a\u0440\u0435\u0442 (\u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f), \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0435\u043d\u0438\u0432\u043e <code>chainKey</code> <code>bigint</code> \u0421\u043a\u0430\u043b\u044f\u0440 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0446\u0435\u043f\u043e\u0447\u0435\u043a \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439"},{"location":"ru/02-core/models/#identifier-secretidentifier","title":"Identifier \u0438 SecretIdentifier","text":"<p>\u042d\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041e\u043d\u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432.</p>"},{"location":"ru/02-core/models/#identifier","title":"Identifier","text":"<p>\u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430-\u0442\u043e\u0447\u043a\u0430 \u043d\u0430 \u044d\u043b\u043b\u0438\u043f\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043a\u0440\u0438\u0432\u043e\u0439 secp256k1, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043d\u0435 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044f \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c.</p> \u041f\u043e\u043b\u0435 \u0422\u0438\u043f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>hex</code> <code>string</code> Hex-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 (66 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0441\u0436\u0430\u0442\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442) <code>bytes</code> <code>Uint8Array</code> \u0411\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 (33 \u0431\u0430\u0439\u0442\u0430) <p>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b:</p> <ul> <li><code>fromHex(hex)</code> / <code>fromBytes(buf)</code> \u2014 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u0438.</li> <li><code>fromChainKey(chainKey, i, PK)</code> \u2014 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432.</li> <li><code>next(chainKey, n)</code> / <code>prev(chainKey, n)</code> \u2014 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e/\u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0446\u0435\u043f\u043e\u0447\u043a\u0435.</li> <li><code>verify(sig, msg)</code> \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430.</li> </ul>"},{"location":"ru/02-core/models/#secretidentifier","title":"SecretIdentifier","text":"<p>\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 <code>Identifier</code>, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 (\u0441\u043a\u0430\u043b\u044f\u0440) \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439.</p> \u041f\u043e\u043b\u0435 \u0422\u0438\u043f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>secret</code> <code>bigint</code> \u0417\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043a\u0430\u043b\u044f\u0440 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b:</p> <ul> <li><code>sign(msg)</code> \u2014 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430.</li> </ul> <p>\u0412\u0430\u0436\u043d\u043e: <code>SecretIdentifier</code> \u043d\u0435\u043b\u044c\u0437\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0437 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438: - <code>SecretIdentifier.fromSecret(secret)</code> - <code>SecretIdentifier.random()</code></p>"},{"location":"ru/02-core/models/#messageheader","title":"\u041e\u0431\u044a\u0435\u043a\u0442 MessageHeader","text":"<p><code>MessageHeader</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u0438 \u0435\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435. \u041e\u043d \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p>"},{"location":"ru/02-core/models/#messageheader_1","title":"\u041f\u043e\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>MessageHeader</code>:","text":"\u041f\u043e\u043b\u0435 \u0422\u0438\u043f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>txid</code> <code>string</code> \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 Kaspa <code>peer</code> <code>Peer</code> \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435 <code>prefix</code> <code>string</code> \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f <code>type</code> <code>number</code> \u0422\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (<code>messageType</code>) <code>identifier</code> <code>Identifier</code> \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f <code>blockMeta.hash</code> <code>string</code> \u0425\u0435\u0448 \u0431\u043b\u043e\u043a\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f <code>blockMeta.timestamp</code> <code>bigint</code> \u0412\u0440\u0435\u043c\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f (Unix-time) <code>blockMeta.daaScore</code> <code>bigint</code> \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0442\u0438 Kaspa (DAA) <code>consensusHash</code> <code>string</code> \u0425\u0435\u0448 \u043a\u043e\u043d\u0441\u0435\u043d\u0441\u0443\u0441\u0430 (\u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435)"},{"location":"ru/02-core/sdk/","title":"Kaspeak SDK","text":"<p>\u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c Kaspeak SDK. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0441\u0445\u0435\u043c\u044b \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> <p>\u0417\u0434\u0435\u0441\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e, \u043a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f SDK \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435.</p>"},{"location":"ru/02-core/sdk/#_1","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 SDK:</p> <pre><code>import { Kaspeak, randomBytes } from \"kaspeak-sdk\";\n\nconst sdk = await Kaspeak.create(randomBytes(32), \"CHAT\");\nawait sdk.connect();\n</code></pre>"},{"location":"ru/02-core/sdk/#createprivatekey-prefix","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u0430 <code>create(privateKey, prefix)</code>","text":"<ul> <li><code>privateKey</code> \u2014 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043a\u0430\u043a <code>bigint</code>, <code>number</code>, \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0430\u0439\u0442 (<code>Uint8Array</code>) \u0438\u043b\u0438 hex-\u0441\u0442\u0440\u043e\u043a\u0430.</li> <li><code>prefix</code> \u2014 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 4 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 ASCII. \u042d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u043b\u0438\u0441\u044c.</li> </ul> <p>\u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 <code>create()</code> SDK \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u0433\u043e\u0442\u043e\u0432 \u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044e.</p>"},{"location":"ru/02-core/sdk/#connectnetworkid-url","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u0430 <code>connect(networkId?, url?)</code>","text":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>networkId</code> <code>\"testnet-10\"</code> \u0421\u0435\u0442\u044c Kaspa (<code>\"mainnet\"</code> \u0438\u043b\u0438 \u043b\u044e\u0431\u0430\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0435\u0442\u044c) <code>url</code> (\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438) URL \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 Kaspa-\u043d\u043e\u0434\u044b (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)"},{"location":"ru/02-core/sdk/#_2","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":"<p>Kaspeak SDK \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u0439:</p> <pre><code>sdk.on(\"KaspeakMessageReceived\", async ({ header, data }) =&gt; {\n    // \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n});\n\nsdk.on(\"error\", console.error);\n</code></pre> <ul> <li><code>KaspeakMessageReceived</code> \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e payload-\u0430, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u0442\u0438\u043f \u043d\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d.</li> <li><code>error</code> \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0445 \u0441\u0435\u0442\u0438, \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0448\u0438\u0431\u043a\u0430\u0445.</li> </ul>"},{"location":"ru/02-core/sdk/#_3","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439:</p> <pre><code>class ChatMsg extends BaseMessage {\n    static messageType = 1337; // \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    static requiresEncryption = true; // \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043b\u0438 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() { return { t: this.text }; }\n    fromPlainObject({ t }) { this.text = t; }\n}\n\nsdk.registerMessage(ChatMsg, async (header, rawData) =&gt; {\n    const secret = header.peer.sharedSecret; // \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u0430\n    const chat = await sdk.decode(header, rawData, secret);\n    console.log(chat.text);\n});\n</code></pre> <p>\u041c\u0435\u0442\u043e\u0434 <code>registerMessage(ctor, worker?)</code>:</p> <ul> <li><code>ctor</code> \u2014 \u043a\u043b\u0430\u0441\u0441-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a <code>BaseMessage</code>.</li> <li><code>worker</code> \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430.</li> </ul>"},{"location":"ru/02-core/sdk/#sdk","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b SDK \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438","text":"<p>\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f:</p> <pre><code>const encoded = await sdk.encode(messageInstance, secret);\nconst tx = await sdk.createTransaction(encoded.length);\nconst opIds = sdk.getOutpointIds(tx);\nconst payload = await sdk.createPayload(\n    opIds,\n    messageInstance.messageType,\n    Identifier.random(),\n    encoded\n);\nawait sdk.sendTransaction(tx, payload);\n</code></pre> <p>\u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f:</p> <pre><code>const message = await sdk.decode(header, rawData, secret);\n</code></pre> <p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0439 \u0434\u0438\u0430\u043b\u043e\u0433\u0430 (\u0434\u043b\u044f \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432):</p> <pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(remotePublicKey);\n</code></pre> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0430:</p> <pre><code>const kasBalance = await sdk.getBalance();\n</code></pre>"},{"location":"ru/02-core/sdk/#sdk_1","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b SDK","text":"<p>Kaspeak SDK \u0438\u043c\u0435\u0435\u0442 \u0433\u0438\u0431\u043a\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438:</p> <pre><code>sdk.setPrefixFilterEnabled(false); // \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u043b\u044e\u0431\u044b\u043c\u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438\nsdk.setSignatureVerificationEnabled(false); // \u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u0438 (\u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e!)\nsdk.setPriorityFee(0.1); // \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 \u0437\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e \u0432 KAS\n</code></pre>"},{"location":"ru/02-core/sdk/#sdk_2","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 SDK","text":"\u041c\u0435\u0442\u043e\u0434 / \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>sdk.address</code> KAS-\u0430\u0434\u0440\u0435\u0441, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0439 \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430. <code>sdk.publicKey</code> \u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 (hex, 33 \u0431\u0430\u0439\u0442\u0430 \u0432 \u0441\u0436\u0430\u0442\u043e\u043c \u0432\u0438\u0434\u0435). <code>sdk.balance</code> \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430. <code>sdk.utxoCount</code> \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e UTXO \u043d\u0430 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435. <code>sdk.isConnected</code> \u0421\u0442\u0430\u0442\u0443\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0442\u0438 Kaspa. <code>sdk.getAddressFromPublicKey()</code> \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 Kaspa \u043f\u043e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443."},{"location":"ru/02-core/utils/","title":"\u0423\u0442\u0438\u043b\u0438\u0442\u044b","text":""},{"location":"ru/02-core/utils/#_1","title":"\u0423\u0442\u0438\u043b\u0438\u0442\u044b","text":""},{"location":"ru/02-core/utils/#bytestohex","title":"bytesToHex","text":"<pre><code>const hex = bytesToHex(new Uint8Array([0xde, 0xad, 0xbe, 0xef]));\n// \"deadbeef\"\n</code></pre> <ul> <li><code>bytes</code> \u2013 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.</li> <li><code>byteSize</code> (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d) \u2013 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0432\u044b\u0445\u043e\u0434 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0434\u0443\u0449\u0438\u043c\u0438 \u043d\u0443\u043b\u044f\u043c\u0438 \u0434\u043e <code>byteSize * 2</code> \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.</li> </ul>"},{"location":"ru/02-core/utils/#bytestoint","title":"bytesToInt","text":"<pre><code>const n = bytesToInt(new Uint8Array([0xff, 0x01]));\n// 65281n\n</code></pre> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u0435\u0437\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e <code>bigint</code>.</p>"},{"location":"ru/02-core/utils/#hextobytes","title":"hexToBytes","text":"<pre><code>const buf = hexToBytes(\"deadbeef\");\n// Uint8Array(4) [ 222, 173, 190, 239 ]\n</code></pre> <ul> <li>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435: \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0447\u0451\u0442\u043d\u0430\u044f; \u0438\u043d\u0430\u0447\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0448\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.</li> </ul>"},{"location":"ru/02-core/utils/#inttobytes","title":"intToBytes","text":"<pre><code>const buf = intToBytes(0x1234n, 4);\n// Uint8Array(4) [ 0, 0, 18, 52 ]\n</code></pre> <ul> <li><code>byteSize</code> \u2013 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430.   \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0434\u0443\u0449\u0438\u043c\u0438 \u043d\u0443\u043b\u044f\u043c\u0438.</li> <li>\u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 <code>number</code> \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>BigInt()</code>.</li> </ul>"},{"location":"ru/02-core/utils/#inttohex","title":"intToHex","text":"<pre><code>const hex = intToHex(4660, 4);\n// 00001234\n</code></pre> <p>\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e <code>intToBytes</code>, \u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443.</p>"},{"location":"ru/02-core/utils/#randombytes","title":"randomBytes","text":"<pre><code>const nonce = randomBytes(24);\n// Uint8Array(24) [\n//  133, 199,  42,  72, 64, 23, 157,\n//   73, 233, 145,  94, 63, 78,  17,\n//   24,  13, 182, 185, 52, 29,  38,\n//  171, 215, 234\n//]\n</code></pre> <ul> <li>\u0414\u0435\u043b\u0435\u0433\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u0437\u043e\u0432 <code>@noble/hashes/utils::randomBytes</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442   \u043a\u0440\u0438\u043f\u0442\u043e-\u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b (Web Crypto \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 / <code>node:crypto</code> \u0432 Node.js).</li> <li>\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u0443\u0444\u0435\u0440 \u0440\u043e\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.</li> </ul>"},{"location":"ru/02-core/utils/#_2","title":"\u0417\u0430\u043c\u0435\u0442\u043a\u0438","text":"<ol> <li>\u0412\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0444\u0435\u0440\u044b \u2014 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442.</li> <li><code>intToHex</code> \u0438 <code>intToBytes</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u043a\u0430\u043a <code>number</code>, \u0442\u0430\u043a \u0438 <code>bigint</code>; \u043e\u0434\u043d\u0430\u043a\u043e \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 &gt; 2^53 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>bigint</code>, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0442\u0435\u0440\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438.</li> <li>\u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0438 \u0445\u0435\u0448\u0430\u043c\u0438 \u0437\u0430\u0434\u0430\u0432\u0430\u0439\u0442\u0435 <code>byteSize</code>, \u0447\u0442\u043e\u0431\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>32</code> \u0431\u0430\u0439\u0442\u0430 / <code>64</code> \u0441\u0438\u043c\u0432\u043e\u043b\u0430).</li> </ol>"},{"location":"ru/03-advanced/delegation/","title":"\u0414\u0435\u043b\u0435\u0433\u0430\u0446\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439","text":"<p>\u0421\u0445\u0435\u043c\u0430 \u00ab\u043a\u043b\u0438\u0435\u043d\u0442 &gt; \u0441\u0435\u0440\u0432\u0435\u0440\u00bb \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Kaspeak \u0431\u0435\u0437 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f KAS-\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0448\u0438\u0444\u0440\u0443\u0435\u0442 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442, \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e \u0432 \u0441\u0435\u0442\u044c.</p>"},{"location":"ru/03-advanced/delegation/#_2","title":"\u0414\u0432\u0443\u0445\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440","text":"<ol> <li>\u041a\u043b\u0438\u0435\u043d\u0442 \u0448\u0438\u0444\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0435\u0433\u043e \u0434\u043b\u0438\u043d\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443.</li> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0438 \u043e\u0442\u0434\u0430\u0451\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 <code>outpointIds</code>.</li> <li>\u041a\u043b\u0438\u0435\u043d\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 Payload (\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 + Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u044c) \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0443.</li> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 Payload \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e, \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044b \u0441\u0432\u043e\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c, \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u044e \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e \u0432 \u0441\u0435\u0442\u044c Kaspa.</li> </ol> <ul> <li>\u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442; \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043d\u0435 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e.  </li> <li>\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438 \u043e\u043f\u043b\u0430\u0442\u0430 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 \u043b\u0435\u0436\u0438\u0442 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435.  </li> <li>\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0441\u0442\u0440\u0430\u0434\u0430\u0435\u0442: \u0442\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0443\u0436\u0435 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043e XChaCha20-Poly1305.  </li> <li>\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 (\u0430\u0434\u0440\u0435\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440) \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0432\u0438\u0434\u0438\u043c\u044b\u043c\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0443.</li> </ul>"},{"location":"ru/03-advanced/delegation/#_3","title":"\u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u0435, \u043a\u043b\u0438\u0435\u043d\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0439\u043b\u043e\u0430\u0434 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u0441\u0432\u043e\u0438\u043c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0446\u0438\u0435\u0439 \u043f\u0435\u0439\u043b\u043e\u0430\u0434\u0430 \u0432 \u0441\u0435\u0442\u044c. \u0427\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0434\u0430\u0436\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043d\u043e\u0434\u043e\u0439. \u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u043e \u0441\u0430\u043c\u043e\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043f\u043e \u0435\u0433\u043e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043c\u043e\u0433 \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0435\u0433\u043e \u0438\u0437 \u0431\u043b\u043e\u043a\u0434\u0430\u0433\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0432\u043e\u0440\u043a\u0435\u0440\u0435. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0412\u044b, \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435, \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u043c\u0435\u043d \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c, \u043d\u043e \u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438 \u043a\u0430\u043a\u0438\u0435 \u0440\u043e\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0412\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435.</p> <pre><code>const { Kaspeak, BaseMessage, SecretIdentifier, bytesToHex } = require(\"kaspeak-sdk\");\n\nconst SERVER_PRIV_KEY = 6;\nconst CLIENT_PRIV_KEY = 1337;\nconst PREFIX = \"TEST\";\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\nasync function main() {\n    const server_sdk = await Kaspeak.create(SERVER_PRIV_KEY, PREFIX);\n    await server_sdk.connect()\n    console.log(\"Server pubkey\", server_sdk.publicKey);\n\n    server_sdk.registerMessage(SecretNote, async (header, rawData) =&gt; {\n        console.log(\"Peer public key:\", bytesToHex(header.peer.publicKey));\n        const sharedSecret = header.peer.sharedSecret;\n        const decoded = await server_sdk.decode(header, rawData, sharedSecret);\n        console.log(\"Result =&gt;\", decoded);\n    });\n\n    const client_sdk = await Kaspeak.create(CLIENT_PRIV_KEY, PREFIX);\n    console.log(\"Client pubkey\", client_sdk.publicKey);\n    const msg = new SecretNote(\"Hello, SecretNote!\");\n    const conversationKey = client_sdk.deriveConversationKeys(server_sdk.publicKey);\n    const encoded = await client_sdk.encode(msg, conversationKey.secret);\n\n    const transaction = await server_sdk.createTransaction(encoded.length);\n    const outpointIds = server_sdk.getOutpointIds(transaction);\n\n    const identifier = SecretIdentifier.random();\n    const rawPayload = await client_sdk.createPayload(\n        outpointIds,\n        SecretNote.messageType,\n        identifier,\n        encoded\n    );\n\n    await server_sdk.sendTransaction(transaction, rawPayload);\n}\n\nmain();\n</code></pre>"},{"location":"ru/03-advanced/delegation/#_4","title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u043d\u0435 \u043b\u043e\u043c\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445?","text":"<ul> <li> <p>\u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 (33 \u0431\u0430\u0439\u0442\u0430) \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u043e \u0432 <code>Payload</code>, \u043d\u043e   \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u044c.   \u042d\u0442\u043e \u0437\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u043e\u0442 \u043f\u043e\u0434\u043c\u0435\u043d\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0434\u0430\u0436\u0435 \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438.</p> </li> <li> <p>\u041f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043d\u0438\u043a\u0443\u0434\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f; \u0438\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e   \u0445\u0435\u0448-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (<code>marker \u2225 prefix \u2225 \u2026 \u2225 outIds</code>).   \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u0438\u0434\u0438\u0442 \u043b\u0438\u0448\u044c \u0433\u043e\u0442\u043e\u0432\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0435\u0439 \u0437\u043b\u043e\u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u044c.</p> </li> </ul> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0434\u0435\u043b\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u043d\u0438\u043c\u0430\u044f \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u0443\u044e \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"ru/03-advanced/delegation/#_5","title":"\u041a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441\u0441\u044b \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u043d\u0430\u0435\u0442, \u043a\u043e\u0433\u043e \u0438 \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442\u0435 \u2014 IP, \u0430\u0434\u0440\u0435\u0441 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0432 \u0447\u0438\u0441\u0442\u043e\u043c \u0432\u0438\u0434\u0435.</li> <li>\u0410\u043d\u043e\u043d\u0438\u043c\u043d\u043e\u0441\u0442\u044c \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u043f\u0440\u043e\u043f\u0430\u0434\u0430\u0435\u0442: \u0441\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0443 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e IP, \u0441\u0435\u0441\u0441\u0438\u0438, \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</li> </ul> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0445\u0435\u043c\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0431\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u0432\u0430\u0436\u043d\u0435\u0435 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u0431\u0430\u0440\u044c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430, \u0447\u0435\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u044c.</p>"},{"location":"ru/03-advanced/encryption/","title":"\u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>Kaspeak SDK \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u043e-\u0438\u0437\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <pre><code>ECDH &gt; SHA-256 &gt; SHA-256 &gt; XChaCha20-Poly1305\n</code></pre> <ul> <li>ECDH \u2014 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u0430 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438 \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.  </li> <li>2 x SHA-256 \u2014 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 ECDH \u043a \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 256-\u0431\u0438\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443.  </li> <li>XChaCha20-Poly1305 \u2014 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f.  </li> <li>CBOR + Zstandard \u2014 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u0438\u044f.</li> </ul>"},{"location":"ru/03-advanced/encryption/#_2","title":"\u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438?","text":"<p>Kaspeak SDK \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0434\u0435\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u0412\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c <code>requiresEncryption = true</code>. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0448\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0449\u0438\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 (\u043e\u0431\u0449\u0438\u0439 \u0441\u0435\u043a\u0440\u0435\u0442), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f.</p> <p>\u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442:</p> <ul> <li>\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f;</li> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u0430 (\u043a\u043b\u044e\u0447\u0430) \u0447\u0435\u0440\u0435\u0437 <code>sdk.deriveConversationKeys</code>;</li> <li>\u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0432 \u043c\u0435\u0442\u043e\u0434\u044b <code>sdk.encode</code> \u0438 <code>sdk.decode</code>.</li> </ul> <p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440.</p>"},{"location":"ru/03-advanced/encryption/#_3","title":"\u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0442\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(SecretNote, async (h, raw) =&gt; {\n        const secret = h.peer.sharedSecret;\n        const note = await sdk.decode(h, raw, secret);\n        console.log(note.text);\n    });\n\n    const conversationKeys = sdk.deriveConversationKeys(sdk.publicKey);\n    const note = new SecretNote(\"I love Kaspa!\");\n    const body = await sdk.encode(note, conversationKeys.secret);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, SecretNote.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre> <p>\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u043e\u043c\u0443 \u0441\u0435\u0431\u0435. \u0415\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u0433\u043e-\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e, \u0432\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0432 <code>deriveConversationKeys</code> \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f.</p>"},{"location":"ru/03-advanced/encryption/#_4","title":"\u041a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043e\u0431\u0449\u0438\u0439 \u0441\u0435\u043a\u0440\u0435\u0442 \u0434\u043b\u044f \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f?","text":"<p>\u041e\u0431\u0449\u0438\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c SDK <code>deriveConversationKeys</code>, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u043c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430:</p> <pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(peerPublicKey);\n</code></pre> <ul> <li><code>secret</code> \u2014 \u043a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</li> <li><code>chainKey</code> \u2014 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</li> </ul>"},{"location":"ru/03-advanced/encryption/#encode-decode","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 <code>encode</code> \u0438 <code>decode</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434\u044b <code>encode</code> \u0438 <code>decode</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0432\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u2014 \u043a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>// \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435\nconst encryptedData = await sdk.encode(messageInstance, secret);\n\n// \u0414\u0435\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435\nconst messageInstance = await sdk.decode(header, encryptedData, secret);\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 \u0442\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0447\u0435\u043d \u0444\u043b\u0430\u0433\u043e\u043c <code>requiresEncryption</code>, \u043a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d. \u0415\u0441\u043b\u0438 \u0444\u043b\u0430\u0433 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d, \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043a\u043b\u044e\u0447\u0430 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0430 \u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, SDK \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0443 \u0432\u0430\u0448\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p>"},{"location":"ru/03-advanced/encryption/#sdk","title":"\u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 SDK?","text":""},{"location":"ru/03-advanced/encryption/#1","title":"1. \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430","text":"<pre><code>const sharedPoint = ecdh(privA, pubB) // Uint8Array (33 \u0431\u0430\u0439\u0442\u0430)\nconst secret = sha256(sha256(sharedPoint)) // 32-\u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u044e\u0447\n</code></pre> <p>\u041a\u043b\u044e\u0447, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u0435\u0438\u043c\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438, \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u0435\u043d.</p>"},{"location":"ru/03-advanced/encryption/#2","title":"2. \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0441\u0436\u0430\u0442\u0438\u0435","text":"<pre><code>const plain = message.toPlainObject()\nconst cbor = encode(plain) // CBOR\nconst packed = await compressZstd(cbor, 16) // \u0443\u0440\u043e\u0432\u0435\u043d\u044c 16\n</code></pre> <p>CBOR \u0434\u0430\u0451\u0442 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435; Zstandard \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438.</p>"},{"location":"ru/03-advanced/encryption/#3","title":"3. \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<pre><code>const nonce = randomBytes(24)\nconst box = new XChaCha20Poly1305(secret).seal(nonce, packed)\nconst payload = concatenate(nonce, box) // nonce \u2225 ciphertext\n</code></pre> <p>\u041f\u0440\u0438 \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0435 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0438\u043b\u0438 \u0438\u0441\u043a\u0430\u0436\u0451\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u043e\u0448\u0438\u0431\u043a\u0435, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0434\u0451\u0436\u043d\u043e \u043e\u0442\u0431\u0440\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u0447\u0443\u0436\u043e\u0439 \u0438\u043b\u0438 \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0451\u043d\u043d\u044b\u0439 \u0442\u0440\u0430\u0444\u0438\u043a.</p>"},{"location":"ru/03-advanced/encryption/#4","title":"4. \u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430","text":"<pre><code>const nonce = payload.slice(0, 24)\nconst box = payload.slice(24)\nconst clear = new XChaCha20Poly1305(secret).open(nonce, box)\n\nconst cbor = await decompressZstd(clear)\nconst obj = decode(cbor)\n</code></pre>"},{"location":"ru/03-advanced/encryption/#5","title":"5. \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043b\u0438\u043d\u043d\u043e\u0441\u0442\u0438","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0432\u0435\u0441\u044c payload \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u044c\u044e \u0430\u0432\u0442\u043e\u0440\u0430 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 SDK.  \u041d\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044f \u0444\u043b\u0430\u0433 <code>setSignatureVerificationEnabled</code>, \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0431\u044b\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u044b \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044e. \u041b\u044e\u0431\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0439\u0442\u043e\u0432 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 SDK.</p>"},{"location":"ru/03-advanced/identifiers/","title":"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b","text":"<p>\u041b\u044e\u0431\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u044c \u0442\u043e\u0447\u043a\u043e\u0439 \u043d\u0430 \u043a\u0440\u0438\u0432\u043e\u0439 secp256k1.  \u0427\u0430\u0442, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0433\u0440\u0443\u043f\u043f\u0430, \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u2014 \u0432\u0441\u0451 \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0430\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439, \u0435\u0441\u043b\u0438 \u043d\u0430\u043c \u044d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e.</p> <p>\u0412 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u0447\u043a\u0438 \u043a\u0430\u043a \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0446\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439:</p> <ul> <li>\u041b\u044e\u0431\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430, \u043a\u0430\u043d\u0430\u043b \u0438\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u0430\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043d\u0430 \u043a\u0440\u0438\u0432\u043e\u0439, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u043e\u043a\u0440\u0443\u0433 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442.  </li> <li>\u041b\u044e\u0431\u043e\u0439, \u043a\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043b \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c, \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0432\u043e\u0435 \u0430\u0432\u0442\u043e\u0440\u0441\u0442\u0432\u043e, \u0447\u0442\u043e \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u043a\u0430\u043d\u0430\u043b\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043a \u043d\u0438\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043c\u0435\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0443 \u043d\u0435\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u0430. \u0422\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043b\u044e\u0431\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u043a\u0430\u043d\u0430\u043b\u0430 \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0442\u043e \u0447\u0442\u043e \u043e\u043d \u0447\u0438\u0442\u0430\u0435\u0442 \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c, \u0430 \u043d\u0435 \u0437\u043b\u043e\u0443\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u0438\u043a\u043e\u043c.</li> </ul>"},{"location":"ru/03-advanced/identifiers/#_2","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430","text":"<p>\u0422\u0430\u043a \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u044b\u0439 <code>Identifier</code> \u043c\u043e\u0436\u0435\u0442 \u0441\u043b\u0443\u0436\u0438\u0442\u044c x-only \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c Schnorr-\u043f\u043e\u0434\u043f\u0438\u0441\u0438, \u0442\u043e Kaspeak SDK \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043f\u0440\u044f\u043c\u043e \u0432 \u043e\u0431\u044c\u0435\u043a\u0442\u0435 <code>Identifier</code></p> <pre><code>const sid = SecretIdentifier.random()\nconst sig = await sid.sign(\"Hello, Kaspa\")\nconst ok  = await sid.verify(sig, \"Hello, Kaspa\") // true\n</code></pre> <ul> <li><code>SecretIdentifier</code> \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u0441\u043a\u0430\u043b\u044f\u0440 \u0438 \u0443\u043c\u0435\u0435\u0442 <code>sign</code>.</li> <li>\u041e\u0431\u044b\u0447\u043d\u044b\u0439 <code>Identifier</code> \u0445\u0440\u0430\u043d\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u043a\u0443 \u0438 \u0443\u043c\u0435\u0435\u0442 <code>verify</code>.</li> </ul> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>Identifier</code> \u0438 <code>SecretIdentifier</code> \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0439\u0441\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043d\u0435 \u043f\u0440\u0438\u0431\u0435\u0433\u0430\u044f \u043a \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u0434\u0430\u043b\u0435\u0435. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u0412\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0445\u0432\u0430\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Kaspeak SDK, \u0442\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u0435\u043d \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u044b\u0439 BlockDAG \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</p>"},{"location":"ru/03-advanced/identifiers/#_3","title":"\u0421\u0443\u0442\u044c","text":"<p>\u041f\u0443\u0441\u0442\u044c \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u0430\u044f \u00ab\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430\u00bb <code>BasePoint</code>. \u041b\u044e\u0431\u043e\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0442\u043e\u0439 \u0436\u0435 \u043f\u0440\u0438\u0440\u043e\u0434\u044b \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e <code>BasePoint \u00b7 t</code>, \u0433\u0434\u0435 <code>t</code> \u2014 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043e\u0431\u043e\u0438\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c \u0441\u043a\u0430\u043b\u044f\u0440-\u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u044c.</p> <ul> <li>\u0422\u0430\u043a \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e \u0438\u043b\u0438 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u043d\u0435 \u0445\u0440\u0430\u043d\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.  </li> <li>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044c \u0432\u0438\u0434\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438, \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044f \u0438\u0445 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0438.</li> </ul>"},{"location":"ru/03-advanced/identifiers/#_4","title":"\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430","text":"<p>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 (Identifier) \u2014 \u044d\u0442\u043e 33-\u0431\u0430\u0439\u0442\u043e\u0432\u0430\u044f \u0441\u0436\u0430\u0442\u0430\u044f \u0442\u043e\u0447\u043a\u0430 secp256k1, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u0430\u044f \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 </p> <p><code>ID(i) = PK_A \u00b7 (chainKey^i mod n), i \u2265 1</code></p> <ul> <li><code>PK_A</code> \u2014 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u0430\u0432\u0442\u043e\u0440\u0430 (\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439).  </li> <li><code>chainKey</code> \u2014 32-\u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0430\u043b\u044f\u0440, \u043e\u0431\u0449\u0438\u0439 \u0434\u043b\u044f \u043e\u0431\u043e\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432; </li> <li><code>i</code> \u2014 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0430.</li> <li><code>n</code>\u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043a\u0440\u0438\u0432\u043e\u0439 secp256k1.</li> </ul>"},{"location":"ru/03-advanced/identifiers/#chainkey","title":"\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 <code>chainKey</code>","text":"<pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(peerPublicKey)\n</code></pre> <p><code>secret</code> \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ECDH. <code>chainKey = SHA-256(secret)</code> &gt; <code>bigint</code> ( mod <code>n</code> ).</p>"},{"location":"ru/03-advanced/identifiers/#_5","title":"\u0412\u044b\u0432\u043e\u0434 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430","text":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 (<code>+1</code>) <code>ID_(i+1) = ID_i \u00b7 chainKey</code> \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 (<code>-1</code>) <code>ID_(i-1) = ID_i \u00b7 chainKey\u207b\u00b9</code> \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439 <code>+k</code> <code>ID_(i+k) = ID_i \u00b7 chainKey^k</code> <p>\u0412\u0441\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u2014 \u043e\u0431\u044b\u0447\u043d\u0430\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0430\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0442\u043e\u0447\u0435\u043a.</p> <pre><code>const id2 = Identifier.fromChainKey(chainKey, 2, sdk.publicKey) // \u043f\u0435\u0440\u0432\u044b\u0439 ID\nconst id3 = id1.next(chainKey)  // \u0432\u0442\u043e\u0440\u043e\u0439 (ID\u2081\u00b7k)\nconst id1 = id1.prev(chainKey)  // \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 (ID\u2081\u00b7k\u207b\u00b9)\n</code></pre> <p>\u0412\u043d\u0443\u0442\u0440\u0438 <code>next/prev</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c.</p>"},{"location":"ru/03-advanced/identifiers/#_6","title":"\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438","text":"<ol> <li>\u041a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043f\u043e\u0447\u043a\u0438.    \u0411\u0435\u0437 <code>chainKey</code> \u043d\u0435\u043b\u044c\u0437\u044f \u043e\u0442\u043b\u0438\u0447\u0438\u0442\u044c <code>ID_1</code> \u043e\u0442 <code>ID_999</code>; \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e.</li> <li>\u041e\u0434\u043d\u0430 \u043f\u0430\u0440\u0430 - \u043e\u0434\u043d\u0430 \u0442\u043e\u0447\u043a\u0430. <code>chainKey</code> \u0442\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u0430\u0440\u044b \u0410 \u0438 \u0411. \u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442 \u00ab\u0441\u043a\u043b\u0435\u0438\u0442\u044c\u00bb \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432.</li> <li>\u041d\u0435\u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c.    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u00ab\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 / \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\u00bb \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0438\u0448\u044c \u0441 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0435\u043c, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u0440\u043e\u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0434\u0430\u0436\u0435 \u0438\u043c\u0435\u044f \u0438\u0445 \u043f\u043e\u043b\u043d\u044b\u0439 \u0430\u0440\u0445\u0438\u0432.</li> </ol> <p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u0445\u0438\u0442\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u0435\u043c\u0443 \u0438 \u043c\u043e\u0449\u043d\u043e\u043c\u0443 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u0435\u0441\u0442\u0438 \u043f\u043e \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u043c\u0443 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0438 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0442\u0438 Kaspa. \u0422\u0435\u043f\u0435\u0440\u044c \u0437\u043b\u043e\u0443\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u0438\u043a \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0448\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u043e \u0434\u0430\u0436\u0435 \u0431\u044b\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u043c \u0432 \u0442\u043e\u043c, \u0441 \u043a\u0435\u043c \u0438\u043c\u0435\u043d\u043d\u043e \u0412\u044b \u043e\u0431\u0449\u0430\u0435\u0442\u0435\u0441\u044c.</p>"},{"location":"ru/05-meta/changelog/#001-2025-07-03","title":"0.0.1 \u2014 2025-07-03","text":"<ul> <li>\u041f\u0435\u0440\u0432\u0430\u044f \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f SDK</li> </ul>"},{"location":"ru/05-meta/contributing/","title":"\u041a\u0430\u043a \u0432\u043d\u0435\u0441\u0442\u0438 \u0432\u043a\u043b\u0430\u0434","text":"<ol> <li>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f  </li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0432\u0435\u0442\u043a\u0443 <code>feature/\u0432\u0430\u0448\u0430-\u0444\u0443\u043d\u043a\u0446\u0438\u044f</code> </li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 Pull Request, \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044f \u0441\u0442\u0438\u043b\u044c TypeScript-lint  </li> <li>\u041e\u0434\u0438\u043d PR \u2014 \u043e\u0434\u043d\u0430 \u0444\u0438\u0447\u0430</li> </ol> <p>\u0415\u0441\u043b\u0438 \u0412\u044b \u0447\u0442\u043e-\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0435 \u043d\u0430 \u0431\u0430\u0437\u0435 Kaspeak SDK, \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0431 \u044d\u0442\u043e\u043c \u043d\u0430\u043c. \u041c\u044b \u0441 \u0440\u0430\u0434\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0435\u043b\u0438\u043c\u0441\u044f \u043d\u043e\u0432\u043e\u0441\u0442\u044c\u044e \u0432 README \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435.</p>"},{"location":"ru/05-meta/contributing/#_2","title":"\u0421\u0432\u044f\u0437\u044c \u0438 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f","text":"\u041a\u0430\u043d\u0430\u043b \u0421\u0441\u044b\u043b\u043a\u0430 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 https://t.me/kaspeak_support \u0427\u0430\u0442 (RU) https://t.me/kaspeak_ru Chat (EN) https://t.me/kaspeak_en Twitter / X https://x.com/KaspeakOfficial Email kaspeak@proton.me"},{"location":"","title":"Kaspeak SDK","text":"<p>Kaspeak SDK is a tool for quickly and conveniently creating decentralized applications on the Kaspa BlockDAG. The SDK takes care of all low-level tasks: forming, sending and receiving messages, handling transactions and cryptography.</p>"},{"location":"#what-you-can-do-with-the-sdk","title":"What you can do with the SDK","text":"<ul> <li>Create and transmit any textual or binary data through Kaspa transactions.</li> <li>Easily develop custom message types with automatic serialization and callbacks.</li> <li>Utilize built-in cryptographic methods for data protection and authentication (ECDH, XChaCha20-Poly1305, Schnorr).</li> <li>Minimize transaction fees through compact data packaging using CBOR and Zstandard compression.</li> <li>Make confidential conversations using unique cryptographic identifiers.</li> <li>Run applications seamlessly both in the browser and Node.js environments without additional effort.</li> </ul> <p>Kaspeak SDK frees you from needing to dive into network interaction details and cryptography. Focus on your application's logic\u2014we've taken care of the rest.</p> <p>Launch a chat, game, bot, or any other application directly on the Kaspa network. Quickly, securely, without intermediaries or censorship.</p>"},{"location":"01-overview/intro/","title":"Introduction","text":"<p>Kaspeak SDK lets you easily create full-featured Web3 applications running directly on the Kaspa network. This unlocks practically unlimited opportunities for exchanging arbitrary data\u2014text, files, messages\u2014instantly and at minimal cost.</p> <p>With Kaspeak SDK, developers do not need to deal with low-level network interactions, manage transactions manually, or configure encryption themselves. The SDK provides a ready-to-use solution with a clear API and a high level of abstraction.</p>"},{"location":"01-overview/intro/#key-advantages-of-the-sdk","title":"Key advantages of the SDK","text":"<ul> <li>Speed and scalability: Instant data delivery due to the high throughput of the Kaspa network.</li> <li>Low fees: Minimization of message size through efficient packaging (CBOR + Zstandard).</li> <li>Security and privacy: Proven cryptographic schemes (ECDH, XChaCha20-Poly1305, Schnorr signatures).</li> <li>Easy integration: Single SDK for browser and Node.js with an identical API.</li> <li>Extensibility and convenience: Easily add custom message types and register event handlers.</li> </ul> <p>Kaspeak SDK is ideal for developing:</p> <ul> <li>Private and public chats</li> <li>Games and gaming services</li> <li>Notification systems</li> <li>Data transfer and file sharing services</li> <li>Any other decentralized applications</li> </ul> <p>If you are looking for a simple and reliable tool to quickly deploy your own service on the Kaspa network, Kaspeak SDK will be your best helper.</p> <p>Start developing right now\u2014Web3 has never been this accessible!</p>"},{"location":"01-overview/quick-start/","title":"Quick Start","text":"<p>By default, Kaspeak SDK operates on the <code>TESTNET-10</code> network, but nothing prevents you from using <code>MAINNET</code> for your application.</p> <p>You can get some TKAS on <code>TESTNET-10</code> using the faucet.</p>"},{"location":"01-overview/quick-start/#installation","title":"Installation","text":"<pre><code>pnpm add kaspeak-sdk\n</code></pre>"},{"location":"01-overview/quick-start/#initialization","title":"Initialization","text":"<pre><code>const { Kaspeak } = require(\"kaspeak-sdk\");\n\nconst PREFIX = \"TEST\";\nconst PRIV_KEY = 6;\n\nconst sdk = await Kaspeak.create(PRIV_KEY, PREFIX);\nawait sdk.connect();\n</code></pre> <p><code>PREFIX</code> is your application's unique name, limited to 4 bytes. It prevents interference from other SDK users' messages.</p>"},{"location":"01-overview/quick-start/#creating-sending-and-receiving-an-unencrypted-message","title":"Creating, sending, and receiving an unencrypted message","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass ExampleMessage extends BaseMessage {\n    static requiresEncryption = false;\n    static messageType = 1;\n\n    constructor(foo = \"\", bar = \"\", header) {\n        super(header);\n        this.foo = foo;\n        this.bar = bar;\n    }\n\n    toPlainObject() {\n        return { f: this.foo, b: this.bar };\n    }\n\n    fromPlainObject(obj) {\n        this.foo = obj.f ?? \"\";\n        this.bar = obj.b ?? \"\";\n    }\n}\n\nconst PREFIX = \"TEST\";\nconst PRIV_KEY = 6;\nconst NETWORK_ID = \"testnet-10\";\n\nlet sdk;\n\nasync function exampleHandler(header, raw) {\n    const msg = await sdk.decode(header, raw);\n    console.log(\"Foo:\", msg.foo, \"Bar:\", msg.bar);\n}\n\nasync function main() {\n    sdk = await Kaspeak.create(PRIV_KEY, PREFIX);\n    await sdk.connect(NETWORK_ID);\n    console.log(\"Public key:\", sdk.publicKey);\n    console.log(\"Address:\", sdk.address);\n\n    sdk.registerMessage(ExampleMessage, exampleHandler);\n\n    const msg = new ExampleMessage(\"hello\", \"world\");\n    const encoded = await sdk.encode(msg);\n    const identifier = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(encoded.length);\n    const opIds = sdk.getOutpointIds(tx);\n    const payload = await sdk.createPayload(opIds, ExampleMessage.messageType, identifier, encoded);\n    await sdk.sendTransaction(tx, payload);\n}\n\nmain();\n</code></pre> <p>To run this example on the main network, use <code>NETWORK_ID = \"mainnet\"</code>.</p> <p>This example DOES NOT use message encryption. If you wish to send encrypted messages, see Message Encryption.</p>"},{"location":"02-core/crypto/","title":"Cryptography (Overview)","text":"<p>Kaspeak SDK uses only verified implementations.</p> Algorithm Library Purpose secp256k1 @noble/secp256k1 + custom wrapper Key generation, ECDH Schnorr kaspa-wasm Transaction and payload signing XChaCha20-Poly1305 @stablelib/xchacha20poly1305 Symmetric encryption SHA-256 @noble/hashes Hashing Zstandard @bokuweb/zstd-wasm Payload compression CBOR cborg Compact deterministic binary object representation <p>Detailed schemes and algorithms are presented in \"Advanced Topics\":</p> <ul> <li>Identifiers \u2014 point chains, signatures, movements.  </li> <li>Message Encryption \u2014 step-by-step pipeline: \"object \u2192 CBOR \u2192 Zstd \u2192 XChaCha20\".</li> </ul>"},{"location":"02-core/messages/","title":"Creating Custom Messages","text":"<ol> <li>Create a class extending <code>BaseMessage</code>.</li> <li>Declare two static properties:<ul> <li><code>messageType</code> \u2014 integer <code>0\u202665535</code>, unique for each message type.</li> <li><code>requiresEncryption</code> \u2014 <code>true</code> if data should be encrypted.</li> </ul> </li> <li>Implement methods <code>toPlainObject()</code> and <code>fromPlainObject(obj)</code> to convert instances to plain objects and back.</li> <li>(Optional) Add custom constructor fields and logic.</li> <li>Connect the type to runtime via <code>sdk.registerMessage()</code>; a callback function can also be provided for incoming messages.</li> </ol>"},{"location":"02-core/messages/#example-of-an-unencrypted-message","title":"Example of an Unencrypted Message","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass MyMessage extends BaseMessage {\n    static requiresEncryption = false;\n    static messageType = 100;\n\n    constructor(foo = \"\", bar = \"\", header) {\n        super(header);\n        this.foo = foo;\n        this.bar = bar;\n    }\n\n    toPlainObject() {\n        return { f: this.foo, b: this.bar };\n    }\n\n    fromPlainObject(obj) {\n        this.foo = obj.f ?? \"\";\n        this.bar = obj.b ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(MyMessage, async (h, raw) =&gt; {\n        const msg = await sdk.decode(h, raw);\n        console.log(msg.foo, msg.bar);\n    });\n\n    const msg = new MyMessage(\"hello\", \"world\");\n    const body = await sdk.encode(msg);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, MyMessage.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre>"},{"location":"02-core/messages/#example-of-an-encrypted-message","title":"Example of an Encrypted Message","text":"<pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(SecretNote, async (h, raw) =&gt; {\n        const secret = h.peer.sharedSecret;\n        const note = await sdk.decode(h, raw, secret);\n        console.log(note.text);\n    });\n\n    const conversationKeys = sdk.deriveConversationKeys(sdk.publicKey);\n    const note = new SecretNote(\"I love Kaspa!\");\n    const body = await sdk.encode(note, conversationKeys.secret);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, SecretNote.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre> <p>This example demonstrates sending an encrypted message to oneself. If the message is intended for another user, provide their public key to <code>deriveConversationKeys</code>.</p>"},{"location":"02-core/messages/#recommendations","title":"Recommendations","text":"<ul> <li>Shorten keys in <code>toPlainObject</code> and <code>fromPlainObject</code> to reduce the CBOR payload size.</li> <li>When <code>requiresEncryption = true</code>, always provide the encryption key to <code>encode</code> and <code>decode</code>.</li> </ul>"},{"location":"02-core/models/","title":"Data Models","text":"<p>This page describes key data structures used in Kaspeak SDK for forming, sending, and receiving messages.</p>"},{"location":"02-core/models/#payload-structure","title":"Payload Structure","text":"<p><code>Payload</code> is a data structure embedded in a Kaspa transaction. Each payload contains the actual data and necessary metadata.</p> <p>Payload always starts with a unique <code>KSPK</code> marker (0x4B53454B).</p>"},{"location":"02-core/models/#payload-format","title":"Payload Format","text":"Offset Field Size Description 0 marker 4 Marker <code>KSPK</code> (SDK identifier) 4 version 1 Protocol version (currently = 1) 5 prefix 4 Application prefix (ASCII) 9 type 2 Message type (<code>messageType</code>) 11 id 33 Message identifier (<code>Identifier</code>) 44 publicKey 33 Sender's public key 77 signature 64 Payload's Schnorr signature 141 dataLen 2 Data length (bytes) 143 data N Data (CBOR, compressed, possibly encrypted)"},{"location":"02-core/models/#peer-object","title":"Peer Object","text":"<p><code>Peer</code> describes the message sender and stores the public key and shared secret for encrypted messages.</p>"},{"location":"02-core/models/#peer-fields","title":"<code>Peer</code> fields:","text":"Field Type Description <code>address</code> <code>string</code> Sender's Kaspa address <code>publicKey</code> <code>Uint8Array</code> Sender's public key <code>signature</code> <code>Uint8Array</code> Schnorr signature of payload <code>isOwn</code> <code>boolean</code> <code>true</code> if the message sent by SDK itself <code>sharedSecret</code> <code>Uint8Array</code> Shared secret (encryption key) <code>chainKey</code> <code>bigint</code> Scalar for generating message ID chains"},{"location":"02-core/models/#identifier-and-secretidentifier","title":"Identifier and SecretIdentifier","text":"<p>Cryptographic message identifiers ensure privacy and message linkage within conversations.</p>"},{"location":"02-core/models/#identifier","title":"Identifier","text":"<p>A compressed secp256k1 curve point uniquely identifying a message without revealing order externally.</p> Field Type Description <code>hex</code> <code>string</code> Hex representation of a point (66 characters, compressed format) <code>bytes</code> <code>Uint8Array</code> Binary representation of an identifier (33 bytes) <p>Methods:</p> <ul> <li><code>fromHex(hex)</code> / <code>fromBytes(buf)</code></li> <li><code>fromChainKey(chainKey, i, PK)</code></li> <li><code>next(chainKey, n)</code> / <code>prev(chainKey, n)</code></li> <li><code>verify(sig, msg)</code></li> </ul>"},{"location":"02-core/models/#secretidentifier","title":"SecretIdentifier","text":"<p>Extends <code>Identifier</code> by adding a private key (scalar) for creating signatures.</p> Field Type Description <code>secret</code> <code>bigint</code> Private scalar for signing messages <p>Optional methods:</p> <ul> <li><code>sign(msg)</code> - creating a Schnorr signature of a message using a secret key.</li> </ul> <p>Important: <code>SecretIdentifier</code> cannot be created from public data. Use factories:</p> <ul> <li><code>SecretIdentifier.fromSecret(secret)</code></li> <li><code>SecretIdentifier.random()</code></li> </ul>"},{"location":"02-core/models/#messageheader-object","title":"MessageHeader Object","text":"<p><code>MessageHeader</code> contains all necessary message information.</p>"},{"location":"02-core/models/#messageheader-fields","title":"<code>MessageHeader</code> fields:","text":"Field Type Description <code>txid</code> <code>string</code> Kaspa transaction ID <code>peer</code> <code>Peer</code> Sender information <code>prefix</code> <code>string</code> Application prefix <code>type</code> <code>number</code> Message type <code>identifier</code> <code>Identifier</code> Message identifier <code>blockMeta.hash</code> <code>string</code> Hash of the block in which the transaction was confirmed <code>blockMeta.timestamp</code> <code>bigint</code> Confirmation time (Unix-time) <code>blockMeta.daaScore</code> <code>bigint</code> Kaspa network complexity index (DAA) <code>consensusHash</code> <code>string</code> Consensus hash (signed data)"},{"location":"02-core/sdk/","title":"Kaspeak SDK","text":"<p>This page provides an overview of key methods and features of Kaspeak SDK. Detailed cryptographic and data-format schemes are covered separately.</p> <p>Below is a practical guide to using the SDK.</p>"},{"location":"02-core/sdk/#quick-start","title":"Quick Start","text":"<p>Initialize the SDK:</p> <pre><code>import { Kaspeak, randomBytes } from \"kaspeak-sdk\";\n\nconst sdk = await Kaspeak.create(randomBytes(32), \"CHAT\");\nawait sdk.connect();\n</code></pre>"},{"location":"02-core/sdk/#method-createprivatekey-prefix-parameters","title":"Method <code>create(privateKey, prefix)</code> Parameters","text":"<ul> <li><code>privateKey</code> \u2013 can be a <code>bigint</code>, <code>number</code>, <code>Uint8Array</code>, or hex-string.</li> <li><code>prefix</code> \u2013 unique 4-character ASCII prefix per application, avoiding message conflicts.</li> </ul> <p>After <code>create()</code> call, SDK is ready to connect.</p>"},{"location":"02-core/sdk/#method-connectnetworkid-url-parameters","title":"Method <code>connect(networkId?, url?)</code> Parameters","text":"Parameter Default Description <code>networkId</code> <code>\"testnet-10\"</code> Kaspa network (<code>\"mainnet\"</code> or testnets) <code>url</code> (automatic) Specific Kaspa node URL (optional)"},{"location":"02-core/sdk/#event-handling-error-management","title":"Event Handling &amp; Error Management","text":"<p>Kaspeak SDK uses event-driven design:</p> <pre><code>sdk.on(\"KaspeakMessageReceived\", async ({ header, data }) =&gt; {\n    // incoming messages handling\n});\n\nsdk.on(\"error\", console.error);\n</code></pre> <ul> <li><code>KaspeakMessageReceived</code> triggers on every incoming payload.</li> <li><code>error</code> captures network issues, serialization errors, and other SDK issues.</li> </ul>"},{"location":"02-core/sdk/#creating-custom-message-types","title":"Creating Custom Message Types","text":"<p>Custom messages can be created by subclassing <code>BaseMessage</code>:</p> <pre><code>class ChatMsg extends BaseMessage {\n    static messageType = 1337; // Unique message type code\n    static requiresEncryption = true; // Wether message requiries encryption \n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() { return { t: this.text }; }\n    fromPlainObject({ t }) { this.text = t; }\n}\n\nsdk.registerMessage(ChatMsg, async (header, rawData) =&gt; {\n    const secret = header.peer.sharedSecret; // retrieve shared secret\n    const chat = await sdk.decode(header, rawData, secret);\n    console.log(chat.text);\n});\n</code></pre> <p>Method <code>registerMessage(ctor, worker?)</code>:</p> <ul> <li><code>ctor</code> \u2013 <code>BaseMessage</code> subclass.</li> <li><code>worker</code> \u2013 optional handler for incoming messages of that type.</li> </ul>"},{"location":"02-core/sdk/#core-message-operations","title":"Core Message Operations","text":"<p>Encoding and sending a message:</p> <pre><code>const encoded = await sdk.encode(messageInstance, secret);\nconst tx = await sdk.createTransaction(encoded.length);\nconst opIds = sdk.getOutpointIds(tx);\nconst payload = await sdk.createPayload(\n    opIds,\n    messageInstance.messageType,\n    Identifier.random(),\n    encoded\n);\nawait sdk.sendTransaction(tx, payload);\n</code></pre> <p>Decoding received messages:</p> <pre><code>const message = await sdk.decode(header, rawData, secret);\n</code></pre> <p>Obtaining conversation keys:</p> <pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(remotePublicKey);\n</code></pre> <p>Checking wallet balance:</p> <pre><code>const kasBalance = await sdk.getBalance();\n</code></pre>"},{"location":"02-core/sdk/#sdk-configuration-options","title":"SDK Configuration Options","text":"<pre><code>sdk.setPrefixFilterEnabled(false); // Allow messages from any prefix\nsdk.setSignatureVerificationEnabled(false); // Disable signature verification (unsafe!)\nsdk.setPriorityFee(0.1); // Transaction fee adjustment (KAS)\n</code></pre>"},{"location":"02-core/sdk/#additional-methods-properties","title":"Additional Methods &amp; Properties","text":"Method/Property Description <code>sdk.address</code> SDK-generated Kaspa address <code>sdk.publicKey</code> Hex representation of public key <code>sdk.balance</code> Last retrieved wallet balance <code>sdk.utxoCount</code> Count of UTXOs in wallet <code>sdk.isConnected</code> Current network connection status <code>sdk.getAddressFromPublicKey()</code> Derives Kaspa address from public key"},{"location":"02-core/utils/","title":"Utilities","text":""},{"location":"02-core/utils/#utilities","title":"Utilities","text":""},{"location":"02-core/utils/#bytestohex","title":"bytesToHex","text":"<pre><code>const hex = bytesToHex(new Uint8Array([0xde, 0xad, 0xbe, 0xef]));\n// \"deadbeef\"\n</code></pre> <ul> <li><code>bytes</code> \u2013 array of arbitrary length.</li> <li><code>byteSize</code> (optional) \u2013 if specified, the output is padded with leading zeros to <code>byteSize * 2</code> characters.</li> </ul>"},{"location":"02-core/utils/#bytestoint","title":"bytesToInt","text":"<pre><code>const n = bytesToInt(new Uint8Array([0xff, 0x01]));\n// 65281n\n</code></pre> <p>Returns an unsigned <code>bigint</code> value.</p>"},{"location":"02-core/utils/#hextobytes","title":"hexToBytes","text":"<pre><code>const buf = hexToBytes(\"deadbeef\");\n// Uint8Array(4) [ 222, 173, 190, 239 ]\n</code></pre> <ul> <li>Requirement: string length must be even; otherwise, an exception is thrown.</li> </ul>"},{"location":"02-core/utils/#hextoint","title":"hexToInt","text":"<pre><code>const n = hexToInt(\"ff01\");\n// 65281n\n</code></pre>"},{"location":"02-core/utils/#inttobytes","title":"intToBytes","text":"<pre><code>const buf = intToBytes(0x1234n, 4);\n// Uint8Array(4) [ 0, 0, 18, 52 ]\n</code></pre> <ul> <li><code>byteSize</code> \u2013 optional fixed length.   If provided, the result is padded with leading zeros.</li> <li>When passing a <code>number</code>, internal conversion is performed via <code>BigInt()</code>.</li> </ul>"},{"location":"02-core/utils/#inttohex","title":"intToHex","text":"<pre><code>const hex = intToHex(4660, 4);\n// 00001234\n</code></pre> <p>Similar to <code>intToBytes</code>, but returns a string.</p>"},{"location":"02-core/utils/#randombytes","title":"randomBytes","text":"<pre><code>const nonce = randomBytes(24);\n// Uint8Array(24) [\n//  133, 199,  42,  72, 64, 23, 157,\n//   73, 233, 145,  94, 63, 78,  17,\n//   24,  13, 182, 185, 52, 29,  38,\n//  171, 215, 234\n//]\n</code></pre> <ul> <li>Delegates to <code>@noble/hashes/utils::randomBytes</code>, which uses   the platform's cryptographically secure generator (Web Crypto in browsers / <code>node:crypto</code> in Node.js).</li> <li>Guaranteed to return a buffer of exactly the specified length.</li> </ul>"},{"location":"02-core/utils/#notes","title":"Notes","text":"<ol> <li>All functions do not modify the input buffers \u2014 a new object is always created.</li> <li><code>intToHex</code> and <code>intToBytes</code> accept both <code>number</code> and <code>bigint</code>; however, for values &gt; 2^53, you should use <code>bigint</code> to avoid loss of precision.</li> <li>When working with keys and hashes, specify <code>byteSize</code> to guarantee a fixed length (e.g., <code>32</code> bytes / <code>64</code> characters).</li> </ol>"},{"location":"03-advanced/delegation/","title":"Transaction Delegation","text":"<p>Client-Server scheme allows sending Kaspeak messages without funding the client's wallet with KAS. The client encrypts and signs the payload, and the server creates, funds, and broadcasts the transaction.</p>"},{"location":"03-advanced/delegation/#two-way-pipeline","title":"Two-way pipeline","text":"<ol> <li>Client encrypts the message and sends its length to the server.</li> <li>Server creates a suitably sized transaction and returns an <code>outpointIds</code> string to the client.</li> <li>Client forms the payload (encrypted message + Schnorr signature) and sends it back to the server.</li> <li>Server embeds the payload into the transaction, signs inputs with its key, pays the fee, and publishes the transaction on Kaspa.</li> </ol> <ul> <li>Encryption and signing are handled by the client; the private key never leaves the device.  </li> <li>Transaction creation and fee payments are handled by the server.  </li> <li>Data security remains intact: the payload is already encrypted with XChaCha20-Poly1305.  </li> <li>Metadata (sender's address, identifier) become visible to the server.</li> </ul>"},{"location":"03-advanced/delegation/#complete-example","title":"Complete Example","text":"<p>This scheme lets the client form its encrypted payload and sign it using its own private key, while the server publishes the payload to the network. The client doesn't even need to connect directly to the node. The encrypted message is addressed to the server's public key, enabling the server to easily read it from the blockdag via its worker. This example doesn't implement actual client-server data exchange, but clearly illustrates the roles. Real-world apps require a full client-server interaction.</p> <pre><code>const { Kaspeak, BaseMessage, SecretIdentifier, bytesToHex } = require(\"kaspeak-sdk\");\n\nconst SERVER_PRIV_KEY = 6;\nconst CLIENT_PRIV_KEY = 1337;\nconst PREFIX = \"TEST\";\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\nasync function main() {\n    const server_sdk = await Kaspeak.create(SERVER_PRIV_KEY, PREFIX);\n    await server_sdk.connect();\n    console.log(\"Server pubkey\", server_sdk.publicKey);\n\n    server_sdk.registerMessage(SecretNote, async (header, rawData) =&gt; {\n        console.log(\"Peer public key:\", bytesToHex(header.peer.publicKey));\n        const sharedSecret = header.peer.sharedSecret;\n        const decoded = await server_sdk.decode(header, rawData, sharedSecret);\n        console.log(\"Result =&gt;\", decoded);\n    });\n\n    const client_sdk = await Kaspeak.create(CLIENT_PRIV_KEY, PREFIX);\n    console.log(\"Client pubkey\", client_sdk.publicKey);\n    const msg = new SecretNote(\"Hello, SecretNote!\");\n    const conversationKey = client_sdk.deriveConversationKeys(server_sdk.publicKey);\n    const encoded = await client_sdk.encode(msg, conversationKey.secret);\n\n    const transaction = await server_sdk.createTransaction(encoded.length);\n    const outpointIds = server_sdk.getOutpointIds(transaction);\n\n    const identifier = SecretIdentifier.random();\n    const rawPayload = await client_sdk.createPayload(\n        outpointIds,\n        SecretNote.messageType,\n        identifier,\n        encoded\n    );\n\n    await server_sdk.sendTransaction(transaction, rawPayload);\n}\n\nmain();\n</code></pre>"},{"location":"03-advanced/delegation/#why-this-doesnt-compromise-data-integrity","title":"Why this doesn't compromise data integrity?","text":"<ul> <li> <p>Public key (33 bytes) is stored openly in <code>Payload</code>, but also included in the Schnorr signature.   This prevents sender substitution even with delegation.</p> </li> <li> <p>Private key is never transmitted; only the payload hash (<code>marker \u2225 prefix \u2225 \u2026 \u2225 outIds</code>) is signed.   The server sees only the final signature and can't misuse it.</p> </li> </ul> <p>Thus, delegation preserves cryptographic data integrity guarantees while offloading financial costs from the client.</p>"},{"location":"03-advanced/delegation/#privacy-trade-offs","title":"Privacy trade-offs","text":"<ul> <li>Server knows whom you serve and when\u2014IP, address, and identifier become openly visible.</li> <li>Conversation anonymity is compromised: the server can correlate your activity by IP, session, and timing.</li> </ul> <p>Only use delegation if lowering entry barriers is more critical than maintaining complete privacy.</p>"},{"location":"03-advanced/encryption/","title":"Message Encryption","text":"<p>Kaspeak SDK uses a set of well-studied cryptographic primitives to provide confidentiality, integrity, and compactness for transmitted data.</p> <pre><code>ECDH &gt; SHA-256 &gt; SHA-256 &gt; XChaCha20-Poly1305\n</code></pre> <ul> <li>ECDH \u2014 obtaining a shared secret between two parties without transmitting any private data.</li> <li>2 x SHA-256 \u2014 deriving a fixed 256-bit key from the ECDH point.</li> <li>XChaCha20-Poly1305 \u2014 symmetric encryption and authentication.</li> <li>CBOR + Zstandard \u2014 object serialization and further compression.</li> </ul>"},{"location":"03-advanced/encryption/#how-to-use-encryption-in-your-application","title":"How to Use Encryption in Your Application?","text":"<p>Kaspeak SDK automatically handles encryption and decryption of messages if your message class has the parameter <code>requiresEncryption = true</code>. You only need to provide the shared secret key, which is calculated using the recipient\u2019s public key.</p> <p>A typical workflow includes:</p> <ul> <li>Creating a message class that requires encryption;</li> <li>Obtaining a shared secret (key) via <code>sdk.deriveConversationKeys</code>;</li> <li>Passing this key to the <code>sdk.encode</code> and <code>sdk.decode</code> methods.</li> </ul> <p>Below is a full example.</p>"},{"location":"03-advanced/encryption/#full-example","title":"Full Example","text":"<p>Let\u2019s create a message type that requires encryption:</p> <pre><code>const { Kaspeak, BaseMessage, SecretIdentifier } = require(\"kaspeak-sdk\");\n\nclass SecretNote extends BaseMessage {\n    static requiresEncryption = true;\n    static messageType = 101;\n\n    constructor(text = \"\", header) {\n        super(header);\n        this.text = text;\n    }\n\n    toPlainObject() {\n        return { t: this.text };\n    }\n\n    fromPlainObject(obj) {\n        this.text = obj.t ?? \"\";\n    }\n}\n\n(async () =&gt; {\n    const sdk = await Kaspeak.create(6, \"TEST\");\n    await sdk.connect();\n\n    sdk.registerMessage(SecretNote, async (h, raw) =&gt; {\n        const secret = h.peer.sharedSecret;\n        const note = await sdk.decode(h, raw, secret);\n        console.log(note.text);\n    });\n\n    const conversationKeys = sdk.deriveConversationKeys(sdk.publicKey);\n    const note = new SecretNote(\"I love Kaspa!\");\n    const body = await sdk.encode(note, conversationKeys.secret);\n    const id = SecretIdentifier.random();\n    const tx = await sdk.createTransaction(body.length);\n    const ids = sdk.getOutpointIds(tx);\n    const plHex = await sdk.createPayload(ids, SecretNote.messageType, id, body);\n    await sdk.sendTransaction(tx, plHex);\n})();\n</code></pre> <p>This example demonstrates sending an encrypted message to yourself. If the message is intended for someone else, pass the recipient's public key to <code>deriveConversationKeys</code>.</p>"},{"location":"03-advanced/encryption/#how-to-derive-the-shared-secret-for-decoding","title":"How to Derive the Shared Secret for Decoding?","text":"<p>The shared secret key is formed using the SDK method <code>deriveConversationKeys</code>, which takes the other party's public key:</p> <pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(peerPublicKey);\n</code></pre> <ul> <li><code>secret</code> \u2014 the encryption key used for encoding and decoding messages.</li> <li><code>chainKey</code> \u2014 an additional identifier used for generating unique message points.</li> </ul>"},{"location":"03-advanced/encryption/#extra-argument-for-encode-and-decode-methods","title":"Extra Argument for <code>encode</code> and <code>decode</code> Methods","text":"<p>The <code>encode</code> and <code>decode</code> methods take an optional second argument \u2014 the encryption key:</p> <pre><code>// Encryption\nconst encryptedData = await sdk.encode(messageInstance, secret);\n\n// Decryption\nconst messageInstance = await sdk.decode(header, encryptedData, secret);\n</code></pre> <p>If your message type is marked with the <code>requiresEncryption</code> flag, the encryption key is required. If the flag is not set, passing the key has no effect and will be ignored.</p> <p>Thus, the SDK automatically ensures correct encryption and decryption of your messages.</p>"},{"location":"03-advanced/encryption/#how-does-it-work-inside-the-sdk","title":"How Does It Work Inside the SDK?","text":""},{"location":"03-advanced/encryption/#1-forming-the-symmetric-key","title":"1. Forming the Symmetric Key","text":"<pre><code>const sharedPoint = ecdh(privA, pubB) // Uint8Array (33 bytes)\nconst secret = sha256(sha256(sharedPoint)) // 32-byte key\n</code></pre> <p>The key computed by both parties will be completely identical.</p>"},{"location":"03-advanced/encryption/#2-serialization-and-compression","title":"2. Serialization and Compression","text":"<pre><code>const plain = message.toPlainObject()\nconst cbor = encode(plain) // CBOR\nconst packed = await compressZstd(cbor, 16) // level 16\n</code></pre> <p>CBOR provides a compact binary representation; Zstandard further reduces the payload size.</p>"},{"location":"03-advanced/encryption/#3-encryption","title":"3. Encryption","text":"<pre><code>const nonce = randomBytes(24)\nconst box = new XChaCha20Poly1305(secret).seal(nonce, packed)\nconst payload = concatenate(nonce, box) // nonce \u2225 ciphertext\n</code></pre> <p>If the wrong key is used or the data is corrupted, decryption will fail, which reliably filters out foreign or damaged traffic.</p>"},{"location":"03-advanced/encryption/#4-decryption","title":"4. Decryption","text":"<pre><code>const nonce = payload.slice(0, 24)\nconst box = payload.slice(24)\nconst clear = new XChaCha20Poly1305(secret).open(nonce, box)\n\nconst cbor = await decompressZstd(clear)\nconst obj = decode(cbor)\n</code></pre>"},{"location":"03-advanced/encryption/#5-authenticity-verification","title":"5. Authenticity Verification","text":"<p>Before sending, the entire payload is signed with the author's Schnorr signature at the SDK level. As long as you do not disable the <code>setSignatureVerificationEnabled</code> flag, you can be sure that the message truly belongs to the sender. Any change in the bytes will result in a negative verification result on the SDK side.</p>"},{"location":"03-advanced/identifiers/","title":"Identifiers","text":"<p>Any entity can be represented as a point on the secp256k1 curve.  A chat, a user, a group, a specific message\u2014everything can become a public point if it\u2019s convenient for us.</p> <p>In the context of using a point as an identifier, we gain several valuable capabilities:</p> <ul> <li>Any group, channel, or user can be represented as a unique point on the curve, which allows us to aggregate messages around the entity to which they belong.  </li> <li>Anyone who created an entity can prove their authorship, which at the cryptographic level enables a primitive form of management. For example, the channel creator can publish their messages, adding a signature using the scalar they possess. This way, any channel participant can be sure that what they are reading was indeed written by the true owner, not by an attacker.</li> </ul>"},{"location":"03-advanced/identifiers/#signing-and-verification","title":"Signing and Verification","text":"<p>Since every <code>Identifier</code> can serve as an x-only public key for a Schnorr signature, Kaspeak SDK by default supports the ability to sign messages and verify signatures directly within the <code>Identifier</code> object.</p> <pre><code>const sid = SecretIdentifier.random()\nconst sig = await sid.sign(\"Hello, Kaspa\")\nconst ok  = await sid.verify(sig, \"Hello, Kaspa\") // true\n</code></pre> <ul> <li><code>SecretIdentifier</code> stores a private scalar and can <code>sign</code>.</li> <li>A regular <code>Identifier</code> stores only the point and can <code>verify</code>.</li> </ul> <p>You can use <code>Identifier</code> and <code>SecretIdentifier</code> as simple recurring identifiers, without involving the more advanced cryptography described below. However, if you want to unlock all the features of Kaspeak SDK, it is recommended to carefully read the following section, which brings a new element of privacy to the transparent blockDAG.</p>"},{"location":"03-advanced/identifiers/#the-essence","title":"The Essence","text":"<p>Suppose we have some arbitrary \u201cbase point\u201d <code>BasePoint</code>. Any next object of the same nature is just <code>BasePoint \u00b7 t</code>, where <code>t</code> is a scalar multiplier known to both parties.</p> <ul> <li>This gives us a tree or chain of entities, without storing any extra data.  </li> <li>An external observer sees only random-looking points, with no idea of their semantic meaning.</li> </ul>"},{"location":"03-advanced/identifiers/#identifier-formula","title":"Identifier Formula","text":"<p>An Identifier (Identifier) is a 33-byte compressed secp256k1 point, computed as:</p> <p><code>ID(i) = PK_A \u00b7 (chainKey^i mod n), i \u2265 1</code></p> <ul> <li><code>PK_A</code> \u2014 author\u2019s public key (can be any other fixed point as well).  </li> <li><code>chainKey</code> \u2014 32-byte scalar, shared between both parties;</li> <li><code>i</code> \u2014 sequential message number within the dialogue.</li> <li><code>n</code>\u2014 the order of the secp256k1 curve.</li> </ul>"},{"location":"03-advanced/identifiers/#creating-the-chainkey","title":"Creating the <code>chainKey</code>","text":"<pre><code>const { secret, chainKey } = sdk.deriveConversationKeys(peerPublicKey)\n</code></pre> <p><code>secret</code> \u2014 the ECDH result. <code>chainKey = SHA-256(secret)</code> &gt; <code>bigint</code> ( mod <code>n</code> ).</p>"},{"location":"03-advanced/identifiers/#advancing-the-identifier","title":"Advancing the Identifier","text":"Operation Formula next (<code>+1</code>) <code>ID_(i+1) = ID_i \u00b7 chainKey</code> previous (<code>-1</code>) <code>ID_(i-1) = ID_i \u00b7 chainKey\u207b\u00b9</code> arbitrary <code>+k</code> <code>ID_(i+k) = ID_i \u00b7 chainKey^k</code> <p>All calculations are ordinary scalar multiplications of points.</p> <pre><code>const id2 = Identifier.fromChainKey(chainKey, 2, sdk.publicKey) // first ID\nconst id3 = id1.next(chainKey)  // second (ID\u2081\u00b7k)\nconst id1 = id1.prev(chainKey)  // previous (ID\u2081\u00b7k\u207b\u00b9)\n</code></pre> <p>The <code>next/prev</code> methods use fast exponentiation under the hood.</p>"},{"location":"03-advanced/identifiers/#security-properties","title":"Security Properties","text":"<ol> <li>Chain confidentiality.    Without the <code>chainKey</code>, it\u2019s impossible to tell <code>ID_1</code> from <code>ID_999</code>; all points look random.</li> <li>One pair \u2014 one chain.    The <code>chainKey</code> is identically derived only for the pair A and B. A third party cannot \u201clink\u201d chains belonging to different participants.</li> <li>Untraceability.    The \u201cnext / previous\u201d algorithm works only with the secret multiplier, so it\u2019s impossible to track the history of messages, even with access to a full archive.</li> </ol> <p>Thanks to this simple trick, combined with the powerful encryption described in the Message Encryption section, we can conduct truly secure and private communication within the Kaspa network. Now, an attacker not only cannot decrypt our messages, but cannot even be sure whom you are talking to.</p>"},{"location":"04-api-md/","title":"API","text":"<p>kaspeak-sdk</p>"},{"location":"04-api-md/#kaspeak-sdk","title":"kaspeak-sdk","text":""},{"location":"04-api-md/#classes","title":"Classes","text":"<ul> <li>BaseMessage</li> <li>ECDSA</li> <li>Identifier</li> <li>Kaspeak</li> <li>MessageHeader</li> <li>Payload</li> <li>Peer</li> <li>Point</li> <li>Schnorr</li> <li>Secp256k1</li> <li>SecretIdentifier</li> <li>UnknownMessage</li> </ul>"},{"location":"04-api-md/#interfaces","title":"Interfaces","text":"<ul> <li>BlockMeta</li> </ul>"},{"location":"04-api-md/#functions","title":"Functions","text":"<ul> <li>bytesToHex</li> <li>bytesToInt</li> <li>hexToBytes</li> <li>hexToInt</li> <li>intToBytes</li> <li>intToHex</li> <li>randomBytes</li> <li>setLogLevel</li> </ul>"},{"location":"04-api-md/classes/BaseMessage/","title":"BaseMessage","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / BaseMessage</p>"},{"location":"04-api-md/classes/BaseMessage/#class-abstract-basemessage","title":"Class: <code>abstract</code> BaseMessage","text":"<p>Defined in: models/messages/base-message.ts:3</p>"},{"location":"04-api-md/classes/BaseMessage/#extended-by","title":"Extended by","text":"<ul> <li><code>UnknownMessage</code></li> </ul>"},{"location":"04-api-md/classes/BaseMessage/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/BaseMessage/#constructor","title":"Constructor","text":"<p><code>protected</code> new BaseMessage(<code>header?</code>): <code>BaseMessage</code></p> <p>Defined in: models/messages/base-message.ts:8</p>"},{"location":"04-api-md/classes/BaseMessage/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/BaseMessage/#header","title":"header?","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/BaseMessage/#returns","title":"Returns","text":"<p><code>BaseMessage</code></p>"},{"location":"04-api-md/classes/BaseMessage/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/BaseMessage/#header_1","title":"header?","text":"<p><code>optional</code> header: <code>MessageHeader</code></p> <p>Defined in: models/messages/base-message.ts:6</p>"},{"location":"04-api-md/classes/BaseMessage/#messagetype","title":"messageType","text":"<p><code>static</code> messageType: <code>number</code> = <code>-1</code></p> <p>Defined in: models/messages/base-message.ts:5</p>"},{"location":"04-api-md/classes/BaseMessage/#requiresencryption","title":"requiresEncryption","text":"<p><code>static</code> requiresEncryption: <code>boolean</code> = <code>false</code></p> <p>Defined in: models/messages/base-message.ts:4</p>"},{"location":"04-api-md/classes/BaseMessage/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/BaseMessage/#messagetype_1","title":"messageType","text":""},{"location":"04-api-md/classes/BaseMessage/#get-signature","title":"Get Signature","text":"<p>get messageType(): <code>number</code></p> <p>Defined in: models/messages/base-message.ts:16</p>"},{"location":"04-api-md/classes/BaseMessage/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/BaseMessage/#requiresencryption_1","title":"requiresEncryption","text":""},{"location":"04-api-md/classes/BaseMessage/#get-signature_1","title":"Get Signature","text":"<p>get requiresEncryption(): <code>boolean</code></p> <p>Defined in: models/messages/base-message.ts:12</p>"},{"location":"04-api-md/classes/BaseMessage/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/BaseMessage/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/BaseMessage/#fromplainobject","title":"fromPlainObject()","text":"<p><code>abstract</code> fromPlainObject(<code>obj</code>): <code>void</code></p> <p>Defined in: models/messages/base-message.ts:22</p>"},{"location":"04-api-md/classes/BaseMessage/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/BaseMessage/#obj","title":"obj","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/BaseMessage/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/BaseMessage/#toplainobject","title":"toPlainObject()","text":"<p><code>abstract</code> toPlainObject(): <code>any</code></p> <p>Defined in: models/messages/base-message.ts:20</p>"},{"location":"04-api-md/classes/BaseMessage/#returns_4","title":"Returns","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/ECDSA/","title":"ECDSA","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / ECDSA</p>"},{"location":"04-api-md/classes/ECDSA/#class-ecdsa","title":"Class: ECDSA","text":"<p>Defined in: crypto/signatures.ts:22</p>"},{"location":"04-api-md/classes/ECDSA/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/ECDSA/#constructor","title":"Constructor","text":"<p>new ECDSA(): <code>ECDSA</code></p>"},{"location":"04-api-md/classes/ECDSA/#returns","title":"Returns","text":"<p><code>ECDSA</code></p>"},{"location":"04-api-md/classes/ECDSA/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/ECDSA/#sign","title":"sign()","text":"<p><code>static</code> sign(<code>msg</code>, <code>priv</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/signatures.ts:23</p>"},{"location":"04-api-md/classes/ECDSA/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/ECDSA/#msg","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/ECDSA/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/ECDSA/#returns_1","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/ECDSA/#verify","title":"verify()","text":"<p><code>static</code> verify(<code>signature</code>, <code>msg</code>, <code>publicKey</code>): <code>boolean</code></p> <p>Defined in: crypto/signatures.ts:32</p>"},{"location":"04-api-md/classes/ECDSA/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/ECDSA/#signature","title":"signature","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/ECDSA/#msg_1","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/ECDSA/#publickey","title":"publicKey","text":"<p><code>string</code> | <code>Point</code></p>"},{"location":"04-api-md/classes/ECDSA/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Identifier/","title":"Identifier","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Identifier</p>"},{"location":"04-api-md/classes/Identifier/#class-identifier","title":"Class: Identifier","text":"<p>Defined in: crypto/identifier.ts:29</p> <p>Identifier</p> <p>A compact, chain-movable label built from a compressed secp256k1 point.</p>"},{"location":"04-api-md/classes/Identifier/#concept","title":"Concept","text":"<p>ID(i) = BasePoint \u00b7 chainKey^i  (mod n)      \u2190 \u201cchain-key derivation\u201d</p> <p>where   - BasePoint  \u2013 any long-term public key;   - chainKey   \u2013 32-byte scalar shared by sender and receiver;   - i \u2265 1        \u2013 message index.</p>"},{"location":"04-api-md/classes/Identifier/#features","title":"Features","text":"<ul> <li>Created from hexadecimal string / raw bytes, or derived with <code>fromChainKey</code>.</li> <li><code>next()</code> / <code>prev()</code> move the label forward or backward along the chain     when the caller knows the same chainKey.</li> <li><code>verify()</code> checks a Schnorr signature against this public point.</li> </ul> <p>Note: Without the matching chainKey two identifiers look like independent points and cannot be linked.</p>"},{"location":"04-api-md/classes/Identifier/#extended-by","title":"Extended by","text":"<ul> <li><code>SecretIdentifier</code></li> </ul>"},{"location":"04-api-md/classes/Identifier/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Identifier/#constructor","title":"Constructor","text":"<p><code>protected</code> new Identifier(<code>hex</code>, <code>bytes</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:34</p>"},{"location":"04-api-md/classes/Identifier/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#hex","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Identifier/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Identifier/#returns","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Identifier/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Identifier/#hex_1","title":"hex","text":"<p><code>readonly</code> hex: <code>string</code></p> <p>Defined in: crypto/identifier.ts:30</p>"},{"location":"04-api-md/classes/Identifier/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/Identifier/#bytes_1","title":"bytes","text":""},{"location":"04-api-md/classes/Identifier/#get-signature","title":"Get Signature","text":"<p>get bytes(): <code>Uint8Array</code></p> <p>Defined in: crypto/identifier.ts:82</p> <p>Retrieves a copy of the internal byte array.</p>"},{"location":"04-api-md/classes/Identifier/#returns_1","title":"Returns","text":"<p><code>Uint8Array</code></p> <p>A new <code>Uint8Array</code> instance containing the bytes.</p>"},{"location":"04-api-md/classes/Identifier/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Identifier/#equals","title":"equals()","text":"<p>equals(<code>other</code>): <code>boolean</code></p> <p>Defined in: crypto/identifier.ts:97</p> <p>Determines whether this identifier is equal to another by comparing their hexadecimal representations.</p>"},{"location":"04-api-md/classes/Identifier/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#other","title":"other","text":"<p><code>Identifier</code></p> <p>The identifier to compare with this instance.</p>"},{"location":"04-api-md/classes/Identifier/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p>True if both identifiers have the same hexadecimal string; otherwise, false.</p>"},{"location":"04-api-md/classes/Identifier/#next","title":"next()","text":"<p>next(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:114</p> <p>Jump forward <code>count</code> positions in the chain: <code>ID_(i+count) = ID_i \u00b7 chainKey^count</code></p>"},{"location":"04-api-md/classes/Identifier/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#chainkey","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/Identifier/#count","title":"count","text":"<p>How many messages ahead (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_3","title":"Returns","text":"<p><code>Identifier</code></p> <p>Next identifier in the sequence.</p>"},{"location":"04-api-md/classes/Identifier/#prev","title":"prev()","text":"<p>prev(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:129</p> <p>Jump backward <code>count</code> positions in the chain: <code>ID_(i-count) = ID_i \u00b7 chainKey_inv^count</code> (section 4, bullet 2).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#chainkey_1","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/Identifier/#count_1","title":"count","text":"<p>How many messages back (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_4","title":"Returns","text":"<p><code>Identifier</code></p> <p>Previous identifier in the sequence.</p>"},{"location":"04-api-md/classes/Identifier/#verify","title":"verify()","text":"<p>verify(<code>sig</code>, <code>msg</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: crypto/identifier.ts:143</p> <p>Verifies the provided signature against the message using the Schnorr algorithm.</p>"},{"location":"04-api-md/classes/Identifier/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#sig","title":"sig","text":"<p><code>Uint8Array</code></p> <p>The signature to verify, represented as a Uint8Array.</p>"},{"location":"04-api-md/classes/Identifier/#msg","title":"msg","text":"<p>The message to validate, which can be either a string or a Uint8Array.</p> <p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Identifier/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>A Promise that resolves to a boolean indicating whether the signature is valid.</p>"},{"location":"04-api-md/classes/Identifier/#frombytes","title":"fromBytes()","text":"<p><code>static</code> fromBytes(<code>bytes</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:49</p> <p>Build Identifier from identifier bytes (33 bytes).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_5","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#bytes_2","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_6","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Identifier/#fromchainkey","title":"fromChainKey()","text":"<p><code>static</code> fromChainKey(<code>chainKey</code>, <code>index</code>, <code>publicKey</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:64</p> <p>Derive ID(i) = PK \u00b7 chainKey^i (mod n).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_6","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#chainkey_2","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code> (bigint).</p>"},{"location":"04-api-md/classes/Identifier/#index","title":"index","text":"<p>Message index \u2265 1.</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Identifier/#publickey","title":"publicKey","text":"<p>Base public point PK(A).</p> <p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt; | <code>Point</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_7","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Identifier/#throws","title":"Throws","text":"<p>RangeError if <code>index = 0</code>.</p>"},{"location":"04-api-md/classes/Identifier/#fromhex","title":"fromHex()","text":"<p><code>static</code> fromHex(<code>hex</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:40</p> <p>Build Identifier from identifier in hex (33 bytes).</p>"},{"location":"04-api-md/classes/Identifier/#parameters_7","title":"Parameters","text":""},{"location":"04-api-md/classes/Identifier/#hex_2","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Identifier/#returns_8","title":"Returns","text":"<p><code>Identifier</code></p>"},{"location":"04-api-md/classes/Kaspeak/","title":"Kaspeak","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Kaspeak</p>"},{"location":"04-api-md/classes/Kaspeak/#class-kaspeak","title":"Class: Kaspeak","text":"<p>Defined in: sdk/kaspeak.ts:24</p>"},{"location":"04-api-md/classes/Kaspeak/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/Kaspeak/#address","title":"address","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature","title":"Get Signature","text":"<p>get address(): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:142</p>"},{"location":"04-api-md/classes/Kaspeak/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#balance","title":"balance","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_1","title":"Get Signature","text":"<p>get balance(): <code>number</code></p> <p>Defined in: sdk/kaspeak.ts:150</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#isconnected","title":"isConnected","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_2","title":"Get Signature","text":"<p>get isConnected(): <code>boolean</code></p> <p>Defined in: sdk/kaspeak.ts:126</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Kaspeak/#publickey","title":"publicKey","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_3","title":"Get Signature","text":"<p>get publicKey(): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:146</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_3","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#utxocount","title":"utxoCount","text":""},{"location":"04-api-md/classes/Kaspeak/#get-signature_4","title":"Get Signature","text":"<p>get utxoCount(): <code>number</code></p> <p>Defined in: sdk/kaspeak.ts:154</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_4","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Kaspeak/#callworker","title":"callWorker()","text":"<p>callWorker(<code>header</code>, <code>rawData</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:188</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#header","title":"header","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Kaspeak/#rawdata","title":"rawData","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#connect","title":"connect()","text":"<p>connect(<code>networkId?</code>, <code>url?</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:108</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#networkid","title":"networkId?","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#url","title":"url?","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#createmessageheaderfromtransaction","title":"createMessageHeaderFromTransaction()","text":"<p>createMessageHeaderFromTransaction(<code>txid</code>, <code>prefix</code>, <code>payload</code>, <code>blockMeta</code>, <code>consensusHash</code>): <code>MessageHeader</code></p> <p>Defined in: sdk/kaspeak.ts:259</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#txid","title":"txid","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#prefix","title":"prefix","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#payload","title":"payload","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Kaspeak/#blockmeta","title":"blockMeta","text":"<p><code>BlockMeta</code></p>"},{"location":"04-api-md/classes/Kaspeak/#consensushash","title":"consensusHash","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_7","title":"Returns","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Kaspeak/#createpayload","title":"createPayload()","text":"<p>createPayload(<code>outpointIds</code>, <code>messageType</code>, <code>identifier</code>, <code>data</code>): <code>Promise</code>\\&lt;<code>string</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:221</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#outpointids","title":"outpointIds","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#messagetype","title":"messageType","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#identifier","title":"identifier","text":"<p><code>Identifier</code> | <code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/Kaspeak/#data","title":"data","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#createtransaction","title":"createTransaction()","text":"<p>createTransaction(<code>dataLength</code>): <code>Promise</code>\\&lt;<code>Transaction</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:248</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#datalength","title":"dataLength","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_9","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Transaction</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#decode","title":"decode()","text":"<p>decode\\&lt;<code>T</code>&gt;(<code>header</code>, <code>data</code>, <code>key?</code>): <code>Promise</code>\\&lt;<code>T</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:178</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#t","title":"T","text":"<p><code>T</code> extends <code>BaseMessage</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_5","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#header_1","title":"header","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Kaspeak/#data_1","title":"data","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Kaspeak/#key","title":"key?","text":"<p><code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_10","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>T</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#deriveconversationkeys","title":"deriveConversationKeys()","text":"<p>deriveConversationKeys(<code>publicKey</code>): <code>ConversationKeys</code></p> <p>Defined in: sdk/kaspeak.ts:202</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_6","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#publickey_1","title":"publicKey","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt; | <code>Point</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_11","title":"Returns","text":"<p><code>ConversationKeys</code></p>"},{"location":"04-api-md/classes/Kaspeak/#encode","title":"encode()","text":"<p>encode(<code>message</code>, <code>key?</code>): <code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p> <p>Defined in: sdk/kaspeak.ts:174</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_7","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#message","title":"message","text":"<p><code>BaseMessage</code></p>"},{"location":"04-api-md/classes/Kaspeak/#key_1","title":"key?","text":"<p><code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_12","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#getaddressfrompublickey","title":"getAddressFromPublicKey()","text":"<p>getAddressFromPublicKey(<code>publicKey</code>): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:215</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_8","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#publickey_2","title":"publicKey","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt; | <code>PublicKey</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_13","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#getbalance","title":"getBalance()","text":"<p>getBalance(<code>address?</code>): <code>Promise</code>\\&lt;<code>number</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:130</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_9","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#address_1","title":"address?","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_14","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>number</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#getoutpointids","title":"getOutpointIds()","text":"<p>getOutpointIds(<code>tx</code>): <code>string</code></p> <p>Defined in: sdk/kaspeak.ts:238</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_10","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#tx","title":"tx","text":"<p><code>Transaction</code> | <code>ITransaction</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_15","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#off","title":"off()","text":"<p>off\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:164</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters_1","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#e","title":"E","text":"<p><code>E</code> extends keyof <code>KaspeakEvents</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_11","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#event","title":"event","text":"<p><code>E</code></p>"},{"location":"04-api-md/classes/Kaspeak/#listener","title":"listener","text":"<p>(<code>data</code>) =&gt; <code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#on","title":"on()","text":"<p>on\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:160</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters_2","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#e_1","title":"E","text":"<p><code>E</code> extends keyof <code>KaspeakEvents</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_12","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#event_1","title":"event","text":"<p><code>E</code></p>"},{"location":"04-api-md/classes/Kaspeak/#listener_1","title":"listener","text":"<p>(<code>data</code>) =&gt; <code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#once","title":"once()","text":"<p>once\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:168</p>"},{"location":"04-api-md/classes/Kaspeak/#type-parameters_3","title":"Type Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#e_2","title":"E","text":"<p><code>E</code> extends keyof <code>KaspeakEvents</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_13","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#event_2","title":"event","text":"<p><code>E</code></p>"},{"location":"04-api-md/classes/Kaspeak/#listener_2","title":"listener","text":"<p>(<code>data</code>) =&gt; <code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#parsepayload","title":"parsePayload()","text":"<p>parsePayload(<code>data</code>): <code>Payload</code></p> <p>Defined in: sdk/kaspeak.ts:234</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_14","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#data_2","title":"data","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_19","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Kaspeak/#registermessage","title":"registerMessage()","text":"<p>registerMessage(<code>message</code>, <code>worker?</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:182</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_15","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#message_1","title":"message","text":"<p><code>MessageClass</code></p>"},{"location":"04-api-md/classes/Kaspeak/#worker","title":"worker?","text":"<p><code>WorkerFn</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_20","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#sendtransaction","title":"sendTransaction()","text":"<p>sendTransaction(<code>transaction</code>, <code>payload</code>): <code>Promise</code>\\&lt;<code>string</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:253</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_16","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#transaction","title":"transaction","text":"<p><code>Transaction</code></p>"},{"location":"04-api-md/classes/Kaspeak/#payload_1","title":"payload","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_21","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#setprefixfilterenabled","title":"setPrefixFilterEnabled()","text":"<p>setPrefixFilterEnabled(<code>enabled</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:81</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_17","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#enabled","title":"enabled","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#setpriorityfee","title":"setPriorityFee()","text":"<p>setPriorityFee(<code>feeKAS</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:96</p> <p>Sets the priority fee in KAS (NOT SOMPI!) for transactions. The fee is converted to sompi (1 KAS = 1e8 sompi).</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_18","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#feekas","title":"feeKAS","text":"<p><code>number</code></p> <p>The priority fee in KAS.</p>"},{"location":"04-api-md/classes/Kaspeak/#returns_23","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#throws","title":"Throws","text":"<p>Error if the fee is negative.</p>"},{"location":"04-api-md/classes/Kaspeak/#setsignatureverificationenabled","title":"setSignatureVerificationEnabled()","text":"<p>setSignatureVerificationEnabled(<code>enabled</code>): <code>void</code></p> <p>Defined in: sdk/kaspeak.ts:85</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_19","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#enabled_1","title":"enabled","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_24","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/Kaspeak/#create","title":"create()","text":"<p><code>static</code> create(<code>privateKey</code>, <code>prefix</code>): <code>Promise</code>\\&lt;<code>Kaspeak</code>&gt;</p> <p>Defined in: sdk/kaspeak.ts:66</p>"},{"location":"04-api-md/classes/Kaspeak/#parameters_20","title":"Parameters","text":""},{"location":"04-api-md/classes/Kaspeak/#privatekey","title":"privateKey","text":"<p><code>string</code> | <code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Kaspeak/#prefix_1","title":"prefix","text":"<p><code>string</code> = <code>\"TEST\"</code></p>"},{"location":"04-api-md/classes/Kaspeak/#returns_25","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Kaspeak</code>&gt;</p>"},{"location":"04-api-md/classes/MessageHeader/","title":"MessageHeader","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / MessageHeader</p>"},{"location":"04-api-md/classes/MessageHeader/#class-messageheader","title":"Class: MessageHeader","text":"<p>Defined in: models/message-header.ts:10</p>"},{"location":"04-api-md/classes/MessageHeader/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/MessageHeader/#blockmeta","title":"blockMeta","text":"<p>blockMeta: <code>BlockMeta</code></p> <p>Defined in: models/message-header.ts:16</p>"},{"location":"04-api-md/classes/MessageHeader/#consensushash","title":"consensusHash","text":"<p>consensusHash: <code>string</code></p> <p>Defined in: models/message-header.ts:17</p>"},{"location":"04-api-md/classes/MessageHeader/#identifier","title":"identifier","text":"<p>identifier: <code>Identifier</code></p> <p>Defined in: models/message-header.ts:15</p>"},{"location":"04-api-md/classes/MessageHeader/#peer","title":"peer","text":"<p>peer: <code>Peer</code></p> <p>Defined in: models/message-header.ts:12</p>"},{"location":"04-api-md/classes/MessageHeader/#prefix","title":"prefix","text":"<p>prefix: <code>string</code></p> <p>Defined in: models/message-header.ts:13</p>"},{"location":"04-api-md/classes/MessageHeader/#txid","title":"txid","text":"<p>txid: <code>string</code></p> <p>Defined in: models/message-header.ts:11</p>"},{"location":"04-api-md/classes/MessageHeader/#type","title":"type","text":"<p>type: <code>number</code></p> <p>Defined in: models/message-header.ts:14</p>"},{"location":"04-api-md/classes/MessageHeader/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/MessageHeader/#fromtransaction","title":"fromTransaction()","text":"<p><code>static</code> fromTransaction(<code>myAddress</code>, <code>prefix</code>, <code>txid</code>, <code>address</code>, <code>payload</code>, <code>blockMeta</code>, <code>consensusHash</code>, <code>privateKey</code>): <code>MessageHeader</code></p> <p>Defined in: models/message-header.ts:37</p>"},{"location":"04-api-md/classes/MessageHeader/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/MessageHeader/#myaddress","title":"myAddress","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#prefix_1","title":"prefix","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#txid_1","title":"txid","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#address","title":"address","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#payload","title":"payload","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/MessageHeader/#blockmeta_1","title":"blockMeta","text":"<p><code>BlockMeta</code></p>"},{"location":"04-api-md/classes/MessageHeader/#consensushash_1","title":"consensusHash","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/MessageHeader/#privatekey","title":"privateKey","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/MessageHeader/#returns","title":"Returns","text":"<p><code>MessageHeader</code></p>"},{"location":"04-api-md/classes/Payload/","title":"Payload","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Payload</p>"},{"location":"04-api-md/classes/Payload/#class-payload","title":"Class: Payload","text":"<p>Defined in: models/payload.ts:16</p>"},{"location":"04-api-md/classes/Payload/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Payload/#constructor","title":"Constructor","text":"<p>new Payload(<code>prefix</code>, <code>type</code>, <code>identifier</code>, <code>publicKey</code>, <code>data</code>): <code>Payload</code></p> <p>Defined in: models/payload.ts:26</p>"},{"location":"04-api-md/classes/Payload/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#prefix","title":"prefix","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#type","title":"type","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Payload/#identifier","title":"identifier","text":"<p><code>Identifier</code> | <code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/Payload/#publickey","title":"publicKey","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#data","title":"data","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#returns","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Payload/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Payload/#data_1","title":"data","text":"<p>data: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:24</p>"},{"location":"04-api-md/classes/Payload/#id","title":"id","text":"<p>id: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:21</p>"},{"location":"04-api-md/classes/Payload/#marker","title":"marker","text":"<p>marker: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:17</p>"},{"location":"04-api-md/classes/Payload/#prefix_1","title":"prefix","text":"<p>prefix: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:19</p>"},{"location":"04-api-md/classes/Payload/#publickey_1","title":"publicKey","text":"<p>publicKey: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:22</p>"},{"location":"04-api-md/classes/Payload/#signature","title":"signature","text":"<p>signature: <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:23</p>"},{"location":"04-api-md/classes/Payload/#type_1","title":"type","text":"<p>type: <code>number</code></p> <p>Defined in: models/payload.ts:20</p>"},{"location":"04-api-md/classes/Payload/#version","title":"version","text":"<p>version: <code>number</code></p> <p>Defined in: models/payload.ts:18</p>"},{"location":"04-api-md/classes/Payload/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Payload/#getprefix","title":"getPrefix()","text":"<p>getPrefix(): <code>string</code></p> <p>Defined in: models/payload.ts:122</p>"},{"location":"04-api-md/classes/Payload/#returns_1","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#getsize","title":"getSize()","text":"<p>getSize(): <code>number</code></p> <p>Defined in: models/payload.ts:118</p>"},{"location":"04-api-md/classes/Payload/#returns_2","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/Payload/#sign","title":"sign()","text":"<p>sign(<code>outIds</code>, <code>priv</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: models/payload.ts:109</p>"},{"location":"04-api-md/classes/Payload/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#outids","title":"outIds","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/Payload/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"04-api-md/classes/Payload/#tobytes","title":"toBytes()","text":"<p>toBytes(): <code>Uint8Array</code></p> <p>Defined in: models/payload.ts:69</p>"},{"location":"04-api-md/classes/Payload/#returns_4","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#tohex","title":"toHex()","text":"<p>toHex(): <code>string</code></p> <p>Defined in: models/payload.ts:92</p>"},{"location":"04-api-md/classes/Payload/#returns_5","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#verify","title":"verify()","text":"<p>verify(<code>outIds</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: models/payload.ts:113</p>"},{"location":"04-api-md/classes/Payload/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#outids_1","title":"outIds","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p>"},{"location":"04-api-md/classes/Payload/#frombytes","title":"fromBytes()","text":"<p><code>static</code> fromBytes(<code>bytes</code>): <code>Payload</code></p> <p>Defined in: models/payload.ts:39</p>"},{"location":"04-api-md/classes/Payload/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Payload/#returns_7","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Payload/#fromhex","title":"fromHex()","text":"<p><code>static</code> fromHex(<code>data</code>): <code>Payload</code></p> <p>Defined in: models/payload.ts:65</p>"},{"location":"04-api-md/classes/Payload/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Payload/#data_2","title":"data","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Payload/#returns_8","title":"Returns","text":"<p><code>Payload</code></p>"},{"location":"04-api-md/classes/Peer/","title":"Peer","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Peer</p>"},{"location":"04-api-md/classes/Peer/#class-peer","title":"Class: Peer","text":"<p>Defined in: crypto/peer.ts:4</p>"},{"location":"04-api-md/classes/Peer/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Peer/#constructor","title":"Constructor","text":"<p>new Peer(<code>address</code>, <code>publicKey</code>, <code>signature</code>, <code>isOwn</code>, <code>privateKey</code>): <code>Peer</code></p> <p>Defined in: crypto/peer.ts:14</p>"},{"location":"04-api-md/classes/Peer/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Peer/#address","title":"address","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Peer/#publickey","title":"publicKey","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#signature","title":"signature","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#isown","title":"isOwn","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Peer/#privatekey","title":"privateKey","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Peer/#returns","title":"Returns","text":"<p><code>Peer</code></p>"},{"location":"04-api-md/classes/Peer/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Peer/#address_1","title":"address","text":"<p><code>readonly</code> address: <code>string</code></p> <p>Defined in: crypto/peer.ts:5</p>"},{"location":"04-api-md/classes/Peer/#isown_1","title":"isOwn","text":"<p><code>readonly</code> isOwn: <code>boolean</code></p> <p>Defined in: crypto/peer.ts:8</p>"},{"location":"04-api-md/classes/Peer/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/Peer/#chainkey","title":"chainKey","text":""},{"location":"04-api-md/classes/Peer/#get-signature","title":"Get Signature","text":"<p>get chainKey(): <code>bigint</code></p> <p>Defined in: crypto/peer.ts:40</p>"},{"location":"04-api-md/classes/Peer/#returns_1","title":"Returns","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Peer/#publickey_1","title":"publicKey","text":""},{"location":"04-api-md/classes/Peer/#get-signature_1","title":"Get Signature","text":"<p>get publicKey(): <code>Uint8Array</code></p> <p>Defined in: crypto/peer.ts:22</p>"},{"location":"04-api-md/classes/Peer/#returns_2","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#sharedsecret","title":"sharedSecret","text":""},{"location":"04-api-md/classes/Peer/#get-signature_2","title":"Get Signature","text":"<p>get sharedSecret(): <code>Uint8Array</code></p> <p>Defined in: crypto/peer.ts:35</p>"},{"location":"04-api-md/classes/Peer/#returns_3","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Peer/#signature_1","title":"signature","text":""},{"location":"04-api-md/classes/Peer/#get-signature_3","title":"Get Signature","text":"<p>get signature(): <code>Uint8Array</code></p> <p>Defined in: crypto/peer.ts:26</p>"},{"location":"04-api-md/classes/Peer/#returns_4","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/","title":"Point","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Point</p>"},{"location":"04-api-md/classes/Point/#class-point","title":"Class: Point","text":"<p>Defined in: crypto/secp256k1.ts:59</p>"},{"location":"04-api-md/classes/Point/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Point/#constructor","title":"Constructor","text":"<p>new Point(<code>x</code>, <code>y</code>, <code>z</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:60</p>"},{"location":"04-api-md/classes/Point/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#x","title":"x","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#y","title":"y","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#z","title":"z","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#returns","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Point/#x_1","title":"x","text":"<p><code>readonly</code> x: <code>bigint</code></p> <p>Defined in: crypto/secp256k1.ts:61</p>"},{"location":"04-api-md/classes/Point/#y_1","title":"y","text":"<p><code>readonly</code> y: <code>bigint</code></p> <p>Defined in: crypto/secp256k1.ts:62</p>"},{"location":"04-api-md/classes/Point/#z_1","title":"z","text":"<p><code>readonly</code> z: <code>bigint</code></p> <p>Defined in: crypto/secp256k1.ts:63</p>"},{"location":"04-api-md/classes/Point/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Point/#equals","title":"equals()","text":"<p>equals(<code>other</code>): <code>boolean</code></p> <p>Defined in: crypto/secp256k1.ts:92</p>"},{"location":"04-api-md/classes/Point/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#other","title":"other","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Point/#negate","title":"negate()","text":"<p>negate(): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:96</p>"},{"location":"04-api-md/classes/Point/#returns_2","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#toaffine","title":"toAffine()","text":"<p>toAffine(): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:100</p>"},{"location":"04-api-md/classes/Point/#returns_3","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#tocompressed","title":"toCompressed()","text":"<p>toCompressed(): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:113</p>"},{"location":"04-api-md/classes/Point/#returns_4","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#torawx","title":"toRawX()","text":"<p>toRawX(): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:135</p>"},{"location":"04-api-md/classes/Point/#returns_5","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#touncompressed","title":"toUncompressed()","text":"<p>toUncompressed(): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:123</p>"},{"location":"04-api-md/classes/Point/#returns_6","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#basepoint","title":"basePoint()","text":"<p><code>static</code> basePoint(): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:70</p>"},{"location":"04-api-md/classes/Point/#returns_7","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#fromaffine","title":"fromAffine()","text":"<p><code>static</code> fromAffine(<code>x</code>, <code>y</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:66</p>"},{"location":"04-api-md/classes/Point/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#x_2","title":"x","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#y_2","title":"y","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Point/#returns_8","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#frombytes","title":"fromBytes()","text":"<p><code>static</code> fromBytes(<code>publicKey</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:74</p>"},{"location":"04-api-md/classes/Point/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#publickey","title":"publicKey","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Point/#returns_9","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Point/#fromhex","title":"fromHex()","text":"<p><code>static</code> fromHex(<code>publicKey</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:88</p>"},{"location":"04-api-md/classes/Point/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/Point/#publickey_1","title":"publicKey","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/Point/#returns_10","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Schnorr/","title":"Schnorr","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Schnorr</p>"},{"location":"04-api-md/classes/Schnorr/#class-schnorr","title":"Class: Schnorr","text":"<p>Defined in: crypto/signatures.ts:42</p>"},{"location":"04-api-md/classes/Schnorr/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Schnorr/#constructor","title":"Constructor","text":"<p>new Schnorr(): <code>Schnorr</code></p>"},{"location":"04-api-md/classes/Schnorr/#returns","title":"Returns","text":"<p><code>Schnorr</code></p>"},{"location":"04-api-md/classes/Schnorr/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Schnorr/#sign","title":"sign()","text":"<p><code>static</code> sign(<code>msg</code>, <code>priv</code>): <code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p> <p>Defined in: crypto/signatures.ts:43</p>"},{"location":"04-api-md/classes/Schnorr/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Schnorr/#msg","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#verify","title":"verify()","text":"<p><code>static</code> verify(<code>signature</code>, <code>msg</code>, <code>publicKey</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: crypto/signatures.ts:52</p>"},{"location":"04-api-md/classes/Schnorr/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Schnorr/#signature","title":"signature","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Schnorr/#msg_1","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Schnorr/#publickey","title":"publicKey","text":"<p><code>string</code> | <code>Point</code></p>"},{"location":"04-api-md/classes/Schnorr/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/","title":"Secp256k1","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / Secp256k1</p>"},{"location":"04-api-md/classes/Secp256k1/#class-secp256k1","title":"Class: Secp256k1","text":"<p>Defined in: crypto/secp256k1.ts:141</p>"},{"location":"04-api-md/classes/Secp256k1/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/Secp256k1/#constructor","title":"Constructor","text":"<p>new Secp256k1(): <code>Secp256k1</code></p>"},{"location":"04-api-md/classes/Secp256k1/#returns","title":"Returns","text":"<p><code>Secp256k1</code></p>"},{"location":"04-api-md/classes/Secp256k1/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/Secp256k1/#infinity","title":"Infinity","text":"<p><code>readonly</code> <code>static</code> Infinity: <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:142</p>"},{"location":"04-api-md/classes/Secp256k1/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/Secp256k1/#computey","title":"computeY()","text":"<p><code>static</code> computeY(<code>x</code>, <code>isOdd</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:144</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#x","title":"x","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/classes/Secp256k1/#isodd","title":"isOdd","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/Secp256k1/#returns_1","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#getpub","title":"getPub()","text":"<p><code>static</code> getPub(<code>priv</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:162</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#priv","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/#returns_2","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#getsharedsecret","title":"getSharedSecret()","text":"<p><code>static</code> getSharedSecret(<code>privA</code>, <code>pubB</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/secp256k1.ts:166</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#priva","title":"privA","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/#pubb","title":"pubB","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#returns_3","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/Secp256k1/#mul","title":"mul()","text":"<p><code>static</code> mul(<code>p</code>, <code>priv</code>): <code>Point</code></p> <p>Defined in: crypto/secp256k1.ts:151</p>"},{"location":"04-api-md/classes/Secp256k1/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/Secp256k1/#p","title":"p","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/Secp256k1/#priv_1","title":"priv","text":"<p><code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/Secp256k1/#returns_4","title":"Returns","text":"<p><code>Point</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/","title":"SecretIdentifier","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / SecretIdentifier</p>"},{"location":"04-api-md/classes/SecretIdentifier/#class-secretidentifier","title":"Class: SecretIdentifier","text":"<p>Defined in: crypto/identifier.ts:166</p> <p>SecretIdentifier</p> <p>Identifier that additionally stores its private scalar.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#creation","title":"Creation","text":"<ul> <li><code>fromSecret()</code> \u2013 wrap an existing secret (bigint / bytes / hex).</li> <li><code>random()</code>     \u2013 generate a new cryptographically secure secret.</li> </ul>"},{"location":"04-api-md/classes/SecretIdentifier/#extra-capability","title":"Extra capability","text":"<ul> <li><code>sign()</code> \u2013 produce a Schnorr signature for arbitrary data.</li> </ul> <p>Public-only factories inherited from Identifier are disabled to emphasise that a SecretIdentifier must originate from a secret, not from public material.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#extends","title":"Extends","text":"<ul> <li><code>Identifier</code></li> </ul>"},{"location":"04-api-md/classes/SecretIdentifier/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/SecretIdentifier/#hex","title":"hex","text":"<p><code>readonly</code> hex: <code>string</code></p> <p>Defined in: crypto/identifier.ts:30</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from","title":"Inherited from","text":"<p><code>Identifier</code>.<code>hex</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#secret","title":"secret","text":"<p><code>readonly</code> secret: <code>bigint</code></p> <p>Defined in: crypto/identifier.ts:167</p>"},{"location":"04-api-md/classes/SecretIdentifier/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/SecretIdentifier/#bytes","title":"bytes","text":""},{"location":"04-api-md/classes/SecretIdentifier/#get-signature","title":"Get Signature","text":"<p>get bytes(): <code>Uint8Array</code></p> <p>Defined in: crypto/identifier.ts:82</p> <p>Retrieves a copy of the internal byte array.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p> <p>A new <code>Uint8Array</code> instance containing the bytes.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_1","title":"Inherited from","text":"<p><code>Identifier</code>.<code>bytes</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/SecretIdentifier/#equals","title":"equals()","text":"<p>equals(<code>other</code>): <code>boolean</code></p> <p>Defined in: crypto/identifier.ts:97</p> <p>Determines whether this identifier is equal to another by comparing their hexadecimal representations.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#other","title":"other","text":"<p><code>Identifier</code></p> <p>The identifier to compare with this instance.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p>True if both identifiers have the same hexadecimal string; otherwise, false.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_2","title":"Inherited from","text":"<p><code>Identifier</code>.<code>equals</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#next","title":"next()","text":"<p>next(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:114</p> <p>Jump forward <code>count</code> positions in the chain: <code>ID_(i+count) = ID_i \u00b7 chainKey^count</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#chainkey","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#count","title":"count","text":"<p>How many messages ahead (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_2","title":"Returns","text":"<p><code>Identifier</code></p> <p>Next identifier in the sequence.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_3","title":"Inherited from","text":"<p><code>Identifier</code>.<code>next</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#prev","title":"prev()","text":"<p>prev(<code>chainKey</code>, <code>count</code>): <code>Identifier</code></p> <p>Defined in: crypto/identifier.ts:129</p> <p>Jump backward <code>count</code> positions in the chain: <code>ID_(i-count) = ID_i \u00b7 chainKey_inv^count</code> (section 4, bullet 2).</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_2","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#chainkey_1","title":"chainKey","text":"<p><code>bigint</code></p> <p>Shared <code>chainKey</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#count_1","title":"count","text":"<p>How many messages back (default = 1).</p> <p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_3","title":"Returns","text":"<p><code>Identifier</code></p> <p>Previous identifier in the sequence.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_4","title":"Inherited from","text":"<p><code>Identifier</code>.<code>prev</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#sign","title":"sign()","text":"<p>sign(<code>msg</code>): <code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p> <p>Defined in: crypto/identifier.ts:208</p> <p>Produce Schnorr signature of <code>msg</code> with the stored secret scalar.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_3","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#msg","title":"msg","text":"<p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#verify","title":"verify()","text":"<p>verify(<code>sig</code>, <code>msg</code>): <code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>Defined in: crypto/identifier.ts:143</p> <p>Verifies the provided signature against the message using the Schnorr algorithm.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_4","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#sig","title":"sig","text":"<p><code>Uint8Array</code></p> <p>The signature to verify, represented as a Uint8Array.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#msg_1","title":"msg","text":"<p>The message to validate, which can be either a string or a Uint8Array.</p> <p><code>string</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>boolean</code>&gt;</p> <p>A Promise that resolves to a boolean indicating whether the signature is valid.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#inherited-from_5","title":"Inherited from","text":"<p><code>Identifier</code>.<code>verify</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#frombytes","title":"~~fromBytes()~~","text":"<p><code>static</code> fromBytes(<code>_</code>): <code>never</code></p> <p>Defined in: crypto/identifier.ts:193</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_5","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#_","title":"_","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_6","title":"Returns","text":"<p><code>never</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#deprecated","title":"Deprecated","text":"<p>not available on SecretIdentifier. Use Identifier instead.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#overrides","title":"Overrides","text":"<p><code>Identifier</code>.<code>fromBytes</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#fromchainkey","title":"~~fromChainKey()~~","text":"<p><code>static</code> fromChainKey(): <code>never</code></p> <p>Defined in: crypto/identifier.ts:198</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_7","title":"Returns","text":"<p><code>never</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#deprecated_1","title":"Deprecated","text":"<p>not available on SecretIdentifier. Use Identifier instead.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#overrides_1","title":"Overrides","text":"<p><code>Identifier</code>.<code>fromChainKey</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#fromhex","title":"~~fromHex()~~","text":"<p><code>static</code> fromHex(<code>_</code>): <code>never</code></p> <p>Defined in: crypto/identifier.ts:188</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_6","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#__1","title":"_","text":"<p><code>string</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_8","title":"Returns","text":"<p><code>never</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#deprecated_2","title":"Deprecated","text":"<p>not available on SecretIdentifier. Use Identifier instead.</p>"},{"location":"04-api-md/classes/SecretIdentifier/#overrides_2","title":"Overrides","text":"<p><code>Identifier</code>.<code>fromHex</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#fromsecret","title":"fromSecret()","text":"<p><code>static</code> fromSecret(<code>secret</code>): <code>SecretIdentifier</code></p> <p>Defined in: crypto/identifier.ts:176</p> <p>Wrap existing secret (bigint | number | bytes | hex).</p>"},{"location":"04-api-md/classes/SecretIdentifier/#parameters_7","title":"Parameters","text":""},{"location":"04-api-md/classes/SecretIdentifier/#secret_1","title":"secret","text":"<p><code>string</code> | <code>number</code> | <code>bigint</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_9","title":"Returns","text":"<p><code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/SecretIdentifier/#random","title":"random()","text":"<p><code>static</code> random(): <code>SecretIdentifier</code></p> <p>Defined in: crypto/identifier.ts:203</p> <p>Generate random 32-byte secret (cryptographically secure RNG).</p>"},{"location":"04-api-md/classes/SecretIdentifier/#returns_10","title":"Returns","text":"<p><code>SecretIdentifier</code></p>"},{"location":"04-api-md/classes/UnknownMessage/","title":"UnknownMessage","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / UnknownMessage</p>"},{"location":"04-api-md/classes/UnknownMessage/#class-unknownmessage","title":"Class: UnknownMessage","text":"<p>Defined in: models/messages/unknown-message.ts:3</p>"},{"location":"04-api-md/classes/UnknownMessage/#extends","title":"Extends","text":"<ul> <li><code>BaseMessage</code></li> </ul>"},{"location":"04-api-md/classes/UnknownMessage/#constructors","title":"Constructors","text":""},{"location":"04-api-md/classes/UnknownMessage/#constructor","title":"Constructor","text":"<p>new UnknownMessage(<code>rawData</code>, <code>errorDesc</code>, <code>code</code>): <code>UnknownMessage</code></p> <p>Defined in: models/messages/unknown-message.ts:8</p>"},{"location":"04-api-md/classes/UnknownMessage/#parameters","title":"Parameters","text":""},{"location":"04-api-md/classes/UnknownMessage/#rawdata","title":"rawData","text":"<p><code>null</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p>"},{"location":"04-api-md/classes/UnknownMessage/#errordesc","title":"errorDesc","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#code","title":"code","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#returns","title":"Returns","text":"<p><code>UnknownMessage</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#overrides","title":"Overrides","text":"<p><code>BaseMessage</code>.<code>constructor</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#properties","title":"Properties","text":""},{"location":"04-api-md/classes/UnknownMessage/#code_1","title":"code","text":"<p>code: <code>null</code> | <code>number</code></p> <p>Defined in: models/messages/unknown-message.ts:6</p>"},{"location":"04-api-md/classes/UnknownMessage/#errordesc_1","title":"errorDesc","text":"<p>errorDesc: <code>null</code> | <code>string</code></p> <p>Defined in: models/messages/unknown-message.ts:5</p>"},{"location":"04-api-md/classes/UnknownMessage/#header","title":"header?","text":"<p><code>optional</code> header: <code>MessageHeader</code></p> <p>Defined in: models/messages/base-message.ts:6</p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>header</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#rawdata_1","title":"rawData","text":"<p>rawData: <code>null</code> | <code>Uint8Array</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p> <p>Defined in: models/messages/unknown-message.ts:4</p>"},{"location":"04-api-md/classes/UnknownMessage/#messagetype","title":"messageType","text":"<p><code>static</code> messageType: <code>number</code> = <code>-1</code></p> <p>Defined in: models/messages/base-message.ts:5</p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_1","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>messageType</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#requiresencryption","title":"requiresEncryption","text":"<p><code>static</code> requiresEncryption: <code>boolean</code> = <code>false</code></p> <p>Defined in: models/messages/base-message.ts:4</p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_2","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>requiresEncryption</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#accessors","title":"Accessors","text":""},{"location":"04-api-md/classes/UnknownMessage/#messagetype_1","title":"messageType","text":""},{"location":"04-api-md/classes/UnknownMessage/#get-signature","title":"Get Signature","text":"<p>get messageType(): <code>number</code></p> <p>Defined in: models/messages/base-message.ts:16</p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_3","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>messageType</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#requiresencryption_1","title":"requiresEncryption","text":""},{"location":"04-api-md/classes/UnknownMessage/#get-signature_1","title":"Get Signature","text":"<p>get requiresEncryption(): <code>boolean</code></p> <p>Defined in: models/messages/base-message.ts:12</p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#inherited-from_4","title":"Inherited from","text":"<p><code>BaseMessage</code>.<code>requiresEncryption</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#methods","title":"Methods","text":""},{"location":"04-api-md/classes/UnknownMessage/#fromplainobject","title":"fromPlainObject()","text":"<p>fromPlainObject(<code>_obj</code>): <code>void</code></p> <p>Defined in: models/messages/unknown-message.ts:23</p>"},{"location":"04-api-md/classes/UnknownMessage/#parameters_1","title":"Parameters","text":""},{"location":"04-api-md/classes/UnknownMessage/#_obj","title":"_obj","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#overrides_1","title":"Overrides","text":"<p><code>BaseMessage</code>.<code>fromPlainObject</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#toplainobject","title":"toPlainObject()","text":"<p>toPlainObject(): <code>any</code></p> <p>Defined in: models/messages/unknown-message.ts:15</p>"},{"location":"04-api-md/classes/UnknownMessage/#returns_4","title":"Returns","text":"<p><code>any</code></p>"},{"location":"04-api-md/classes/UnknownMessage/#overrides_2","title":"Overrides","text":"<p><code>BaseMessage</code>.<code>toPlainObject</code></p>"},{"location":"04-api-md/functions/bytesToHex/","title":"bytesToHex","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / bytesToHex</p>"},{"location":"04-api-md/functions/bytesToHex/#function-bytestohex","title":"Function: bytesToHex()","text":"<p>bytesToHex(<code>bytes</code>, <code>byteSize?</code>): <code>string</code></p> <p>Defined in: crypto/utils.ts:144</p>"},{"location":"04-api-md/functions/bytesToHex/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/bytesToHex/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/bytesToHex/#bytesize","title":"byteSize?","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/bytesToHex/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/bytesToInt/","title":"bytesToInt","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / bytesToInt</p>"},{"location":"04-api-md/functions/bytesToInt/#function-bytestoint","title":"Function: bytesToInt()","text":"<p>bytesToInt(<code>bytes</code>): <code>bigint</code></p> <p>Defined in: crypto/utils.ts:160</p>"},{"location":"04-api-md/functions/bytesToInt/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/bytesToInt/#bytes","title":"bytes","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/bytesToInt/#returns","title":"Returns","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/functions/hexToBytes/","title":"hexToBytes","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / hexToBytes</p>"},{"location":"04-api-md/functions/hexToBytes/#function-hextobytes","title":"Function: hexToBytes()","text":"<p>hexToBytes(<code>hex</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/utils.ts:150</p>"},{"location":"04-api-md/functions/hexToBytes/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/hexToBytes/#hex","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/hexToBytes/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/hexToInt/","title":"hexToInt","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / hexToInt</p>"},{"location":"04-api-md/functions/hexToInt/#function-hextoint","title":"Function: hexToInt()","text":"<p>hexToInt(<code>hex</code>): <code>bigint</code></p> <p>Defined in: crypto/utils.ts:176</p>"},{"location":"04-api-md/functions/hexToInt/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/hexToInt/#hex","title":"hex","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/hexToInt/#returns","title":"Returns","text":"<p><code>bigint</code></p>"},{"location":"04-api-md/functions/intToBytes/","title":"intToBytes","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / intToBytes</p>"},{"location":"04-api-md/functions/intToBytes/#function-inttobytes","title":"Function: intToBytes()","text":"<p>intToBytes(<code>integer</code>, <code>byteSize?</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/utils.ts:170</p>"},{"location":"04-api-md/functions/intToBytes/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/intToBytes/#integer","title":"integer","text":"<p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/functions/intToBytes/#bytesize","title":"byteSize?","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/intToBytes/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/intToHex/","title":"intToHex","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / intToHex</p>"},{"location":"04-api-md/functions/intToHex/#function-inttohex","title":"Function: intToHex()","text":"<p>intToHex(<code>a</code>, <code>byteSize?</code>): <code>string</code></p> <p>Defined in: crypto/utils.ts:164</p>"},{"location":"04-api-md/functions/intToHex/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/intToHex/#a","title":"a","text":"<p><code>number</code> | <code>bigint</code></p>"},{"location":"04-api-md/functions/intToHex/#bytesize","title":"byteSize?","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/intToHex/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"04-api-md/functions/randomBytes/","title":"randomBytes","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / randomBytes</p>"},{"location":"04-api-md/functions/randomBytes/#function-randombytes","title":"Function: randomBytes()","text":"<p>randomBytes(<code>n</code>): <code>Uint8Array</code></p> <p>Defined in: crypto/utils.ts:19</p>"},{"location":"04-api-md/functions/randomBytes/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/randomBytes/#n","title":"n","text":"<p><code>number</code></p>"},{"location":"04-api-md/functions/randomBytes/#returns","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"04-api-md/functions/setLogLevel/","title":"setLogLevel","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / setLogLevel</p>"},{"location":"04-api-md/functions/setLogLevel/#function-setloglevel","title":"Function: setLogLevel()","text":"<p>setLogLevel(<code>level</code>): <code>void</code></p> <p>Defined in: utils/logger.ts:53</p>"},{"location":"04-api-md/functions/setLogLevel/#parameters","title":"Parameters","text":""},{"location":"04-api-md/functions/setLogLevel/#level","title":"level","text":"<p><code>LogLevelDesc</code></p>"},{"location":"04-api-md/functions/setLogLevel/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"04-api-md/interfaces/BlockMeta/","title":"BlockMeta","text":"<p>kaspeak-sdk</p> <p>kaspeak-sdk / BlockMeta</p>"},{"location":"04-api-md/interfaces/BlockMeta/#interface-blockmeta","title":"Interface: BlockMeta","text":"<p>Defined in: models/message-header.ts:4</p>"},{"location":"04-api-md/interfaces/BlockMeta/#properties","title":"Properties","text":""},{"location":"04-api-md/interfaces/BlockMeta/#daascore","title":"daaScore","text":"<p>daaScore: <code>bigint</code></p> <p>Defined in: models/message-header.ts:7</p>"},{"location":"04-api-md/interfaces/BlockMeta/#hash","title":"hash","text":"<p>hash: <code>string</code></p> <p>Defined in: models/message-header.ts:5</p>"},{"location":"04-api-md/interfaces/BlockMeta/#timestamp","title":"timestamp","text":"<p>timestamp: <code>bigint</code></p> <p>Defined in: models/message-header.ts:6</p>"},{"location":"05-meta/changelog/","title":"\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439","text":""},{"location":"05-meta/changelog/#001-2025-07-03","title":"0.0.1 \u2014 2025-07-03","text":"<ul> <li>First public SDK release</li> </ul>"},{"location":"05-meta/contributing/","title":"How to Contribute","text":"<ol> <li>Fork the repository.</li> <li>Create a branch named <code>feature/your-feature</code>.</li> <li>Submit a Pull Request following the TypeScript-lint style.</li> <li>One PR per feature.</li> </ol> <p>If you develop something based on Kaspeak SDK, feel free to let us know. We will gladly share the news in our README and community.</p>"},{"location":"05-meta/contributing/#contacts-and-discussions","title":"Contacts and Discussions","text":"Channel Link Support https://t.me/kaspeak_support Chat (RU) https://t.me/kaspeak_ru Chat (EN) https://t.me/kaspeak_en Twitter / X https://x.com/KaspeakOfficial Email kaspeak@proton.me"}]}